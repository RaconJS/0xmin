#"tptasm";
#"ZASM4-0";//version 4.0
import lib "std.0xmin";
//new features with ZASM4:
	//powerful lib "std.0xmin",
	//types,
	//operator overloading,
	//lambda functions,
	//meta by default,
	//new 'high level' phase made up from the 'meta (#)' phace,
	//..prototype as a list of prototypes, for multi inheritence
	//eval
	//powerful statechecking
	//more powerful '$' phase, more similar to '#' phase. '$' is the 'state' phase, and is more declarative(and somewhat reactive),
	//customisable assembly language
	//increment/decrement '++i' 'i++' i#++ == #i #<-> i#+1
	//using £() or '<>' for non-operator overloading blocks
	//different sizes of data. infinite sized numbers, for different word lengths
		//this is similar to a string, except it is not simply a list of chars, it is a list of bits
		e.g. {0x12345678912456789123456789}
		0x0001//16 bit number of value 1
		0x5//4 bit number of value 1
		0xmin.number(size,value)//returns a number of size 
		//this variable size number will be a new part of the 0xmin label object.
		//it can be accessed with ..size and ..value
	//allowing '""{"a";"b";"c"}' --> '""...{"a";"b";"c"}' for shorter conversion to strings ``
//list of types: (new #label 'let a:>', #label 'a', #symbol '¬a', #number, #string, $, @)
let gravitySimulator{
	let dim = 2;//same as #let: dim = 
	let parts:>Array()<:Array(3)<:Array(dim)<:Number;//:@[][3][dim]Number
	let equation:>Function(Number,Number)<:(distance){//:#
		return = 1/distance**3;
	};
	let doStep{
		let dt = 0.1;
		parts.length.iterate()<:i=>{
			let a = parts[i];
			a[2].mutate().fill(0);
			for({let i<=>j;i<parts.length;i++})<:{
				let b = parts[j];
				let difference:>Vector() = b[0]:>as(Vector)-a[0];//here we convert 'b' to a vector to use Vector..prototype..-
				//Vector.length:Number&NonInt ; normally Float or Fixed
				//Array.length:Number&Int
				let distance = difference.length;//same as: difference.forEach((sum,value)=>sum+(value**2))**0.5;
				let force = equation(distance);
				//can use function 'as' to assert a type or use a label as a type
				//can use function 'to' to permenently convert a label to a type
				a[2]:>as(Vector) += difference.forEach(v=>v*force:>as(Number));
				b[2]:>as(Vector) -= difference*force;
			};
			a[1]:>as(Vector) += a[2]:>as(Vector)*dt;
			a[0]:>as(Vector) += a[1]:>as(Vector)*dt + a[2]:>as(Vector)*(1/2*dt**2);
		};
	};
	parts = {repeat dim:0xmin.Math.random():>Number.Float()}
};
let otherThings{
	let list = Array(Number.int)::{1;2;3;4};
	for()<:{let i:>Number() = 0; i < list.length; i++}<:{

	};
	list:>forIn()<:(value){
		value+1;
	};
};
#(){
	a{//same as 'let a{}'
		b{

		};
	};
	a:{//Note: This one is not needed, use
		//with; uses labels of a but code is pushed into the parent scope's label
		//same as
			()={
				...doStuff;
			}::{let ..proto=a}()
		//----
	};
	a::{
		//extend; uses names and ..this from parent
	};
	a:::{
		//and then; uses both labels and pushes into label; useful for modifying objects without needing to use it's name again.
	};
	{:a;
		{:b;
			let [a>¬prop];//assign unique key that is static to a curtain label.
			let [a>¬prop];//similar syntax meaning to 'a.b' except it can only be accessed by the inner scope
		};
	};	
	#(){
		#"ZASM4-0";
		let jump(to,from){
			let dif;
			$dif <-> to-from;
			@:$:0x0&(0xmin.abs(dif)&0xff |(dif<0 *0x100) <<4);
		};
	}
};
std.build();
//TODO,UNUSED,UNFINISHED,UNSTABLE
#"table";
//#"labels";
import "type.0xmin";
import "RegState.0xmin";
//note: using '[]ram' for 'an item on the ram' and 'T~' for 'an invalid (write only) type T'
let File()={
	:self;
	def let name<=>DynLenObjPtr();//:String ; note: has a `meta.assert` that name:+0
	let printString()=>{//:#(&self)->@(%&self)->mutate terminal
		$(Pointer(DynLenObjPtr())<->..this).printString();
	};
	def let parent{//:InvertedTree<.parent>
		def let parent<=>Pointer(File());//:Owner<self> is dropped if/when parent.links[_].parent==parent
		//#Wrapper.wrap(..this,parent);
		def let itemPtr<=>Pointer()<:Item(parent[¬Pointer].data.links,Pointer(self));
	};
	delete self;
	def let info<=>DynLenObjPtr();//:String
	def let data<=>DynLenObjPtr();//:Object*
	def let links<=>DynLenObjPtr();//:File[]* & Graph<File>
}:>Type():>Trait.impl()<:(File){
	//TODO: refactor code into methods
	//UNFINISHED formal methods are not fully implemented yet. this is currently dead code
	let:
		new,unref,
		delete,ref,
		construct,destruct,
		setParent,
	;
	#setParent(label,parent,index){
		label.parent.parent<=>Pointer(parent);
		label.parent.parent<=>Pointer(index);
	}::{let .[¬Trait.asMethod.meta] = ¬};
	#new{
		let .[¬Trait.asMethod.asm] = ¬;
		let use(state){#;
			#return = ..this;
			#static.use(..this);
			repeat(//if construct is already allocated then put it back in this @ function
				(construct[¬Static]&&construct[¬Static]..defs..length)||
				(construct..defs..length)
			):{
				#construct_location<=>{def construct};
				#delete construct[¬Static];
			};
			#static.use(construct);
			#heap.malloc.use();
		};
		let regsUsed;
		let reg = RegEnum();
		let inputs{};
		let outputs{
			def let object = Pointer()<:File()<->reg();
		};
		let construct_location;
		{
			%heap.malloc.inputs.(0) = object.(¬Pointer).data..@..length;
			heap.malloc.call();//optimised for file size
			def construct_location{def construct};
		};
		#regsUsed <-> reg;
	};
	#:static.use()<:"impossible string:";
	//construct:Fn(parent:&File)->Self                                      //rust type annotation
	//construct:@(self:%File~*,parent:%File*)->self & %File* mutate self    //type anotation without boilerplate"
	#construct{
		//boilerplate function signiture
		let .[¬Trait.asMethod.asm] = ¬;//allows for: `let a=Pointer()<:File()<->0;a.construct()`
		let use(state){#;
			#return = ..this;
			#static.use(..this);
		};
		let regsUsed;
		let reg = RegEnum();
		let inputs{
			def let self = Pointer()<:Container()<:File()<->reg();//:%File~*
			def let parent = Pointer()<:File()<->reg();//:%File~*
		};
		let outputs{
			def let self = Pointer()<:File()<->inputs.self;//:%File*
		};
	}::{
		meta.todo("move constructer into here");
		return;
	}::{
		#regsUsed <-> reg;
	}:>static();
	#destruct{
		let .[¬Trait.asMethod.asm] = ¬;
		let use(state){#;
			#return = ..this;
			#static.use(..this);
		};
		let regsUsed;
		let reg = RegEnum();
		let inputs{};
		let outputs{};
		{
			...do;
			return;
		};
		#regsUsed <-> reg;
	};
	#: delete{

	};
};

let startDir = File()::{:root;
	#parent.parent<=>{@..this};
	#parent.itemPtr<=>0;//is not needed since the root cannot be deleted
	#name.meta_set("root":>heap.Object.static():>static.use().data);
	#links.meta_set({
		def let item;
		@File()::{
			#parent::{
				#parent<=>{@root};
				#itemPtr<=>{@item};
			};
			#name.meta_set("foo":>heap.Object.static():>static.use().data);
		}:>static.use();
		def let item;
		@File()::{
			#parent::{
				#parent<=>{@root};
				#itemPtr<=>{@item};
			};
			#name.meta_set("bar":>heap.Object.static():>static.use().data);
		}:>static.use();
		def let item;
		@File()::{
			#parent::{
				#parent<=>{@root};
				#itemPtr<=>{@item};
			};
			#name.meta_set("baz":>heap.Object.static():>static.use());
		}:>static.use();
		delete;
	}:>heap.Object.static():>static.use().data);
	delete root;
}:>static().use();
let keys{
	let copy = +",";
	let paste = +".";
	let cd_parent = +"/";
	let exit = +";";
	let: delete = +"\x08";//backspace to delete
};
let largeReg = RegState();//outlives all other regs
let currentDir:>reg()<=>Pointer()<:File();
let linkDir<=>Pointer()<:File();//assigned later ; used to copy and paste file links
let lastFile<=>Pointer()<:File();//:%File*? ; assigned later
...labelsof{:whenUsedAsCallable;
	let storedState{
		//:File*?
		def let linkDir <=> {@startDir};
		def let currentDir <=> {@startDir};
		def let lastFile <=> {0};
	}:>static();
	let reset{:initialState;//UNUSED
		%currentDir = startDir;
		%linkDir = startDir;
	}:>static();
	let onExit{
		[storedState.currentDir] = %currentDir;
		[storedState.linkDir] = %linkDir;
		[storedState.lastFile] = %lastFile;
		//sp + 1;
		//let else;
		//jump->else if == 0;
		//return;
		//def else;
	};
	let onEnter{
		print("\c0f\p00");
		%currentDir = [storedState:>static.use().currentDir];
		{:block;
			jump -> block..return if == 0;
			%currentDir = startDir;//default to root if null
		};
		%linkDir = [storedState:>static.use().linkDir];
		%lastFile = [storedState:>static.use().lastFile];
		{:block;
			jump -> block..return if == 0;
			%linkDir = startDir;//default to root if null
		};
	};
};
def onEnter;
def let start;
let loopThroughNames;//inline function
reg.weakScope()<:(reg){:printFile;
	let fileAsName <=> Pointer()<:DynLenObjPtr();
	{:ifBlock;
		%lastFile - 0;
		jump->ifBlock..return if == 0;
		meta.assert(+lastFile.name == 0);{
			$set fileAsName=>lastFile;
			fileAsName.printString();
			print("/");
		};
	};
	meta.assert(+currentDir.name == 0);{
		$set fileAsName=>currentDir;
		fileAsName.printString();
	};
	print(":");
	def (loopThroughNames(reg,do){
		:forLoop;
		let i = reg();
		let item = reg()<:Pointer()<:Item(array,File());
		let array = reg()<:Pointer()<:Item(File(),File().links.data);//:%File[]*
		let regsUsed = {i;item;array}<->reg;
		for_start_repeat(i,{
			%i = [%currentDir+currentDir.links.size];
			%i -= 1;
			jump->forLoop..return if < 0 !signed;
			%array = [%currentDir+currentDir.links.data];
		},{
			%item = [%array+%i];//:%file*
			meta.assert(+item.name==0);{
				let name = {...item.name.slice} <-> item;//:String slice
				do(name,regsUsed);
			};
		});
	})(reg,(name){print("\n");name.printString()});
};
let clearString{//:@(%usize)->clears terminal ; assigned later
	let stringLength <=> usize();
	let const_0;//:% 0
	let inputs{
		def let stringLength = stringLength;
	};
	let regsUsed{
		const_0;
		stringLength;
	};//:RegSet
}:>static();
let reg1 = RegEnum(DynLenObjPtr.push.regsUsed);
let char:>reg1()<:Char();
def let getChar = awaitInput(char);
def let linkDir.copy{:handleLinkDir_copy;
	let UIstring = "copied";//user interface to tell user that the currentDir has been copied
	let cleanUp;
	%char - keys.copy;
	if != 0 jump -> cleanUp;
	{:then;
		{:handleUI;
			print("\pb0"...UIstring);
		};
		%linkDir = %currentDir;
	 	jump -> getChar;
	};
	{:finally;//only clean up UI when a non-copying key is pressed
		def cleanUp{
			print(""...{"\pb0";repeat UIstring..length" "});
		};
	};
};
{:ignoreKeys;
	let ignore(charList){
		meta.forEach(charList)<:(charTest,i){
			%char - charTest;
			if == 0 jump -> getChar;
		};
	};
	%char - "~";
	jump -> getChar if > 0 !signed;
	ignore("\n\r\t");
	//only normal letters/numbers
};
delete getChar;
def reg.weakScope()<:(reg){:clearScreen;
	%clearString.stringLength = [%currentDir+currentDir.name.size];
	%clearString.const_0 = 0;
	{:ifBlock;
		%lastFile - 0;
		jump->ifBlock..return if == 0;
		%clearString.stringLength += [%lastFile+lastFile.name.size];
		%clearString.stringLength += {"/"}..length;
	};
	print("\p00",clearString.const_0,{});
	call clearString:>static.use();
	print({repeat {":"}..length " "},clearString.const_0,{});
	loopThroughNames(reg,(name,otherRegsUsed){//clears string
		:forLoop;
		%clearString.stringLength = [%name+name.size];
		print("\n",clearString.const_0,{});
		call static.use()<:clearString::{
			let i = reg();
			#stringLength <-> i;
			#const_0 <-> reg();
			//#regsUsed::{...otherRegsUsed};
			//assume %const_0 == 0
			for_start_repeat(i,{
				%i -= 1;
				jump->forLoop..return if < 0 !signed;
			},{
				print(" ",const_0,{});
			});
			return;
		};
	});
	print("\p00",clearString.const_0,{});
	meta.assert(reg < char);
};
let error{
	let Error(message,do)={
		repeat !!message
			print("\p00\c04error:"...message..."\c0f");
		let call(){
			#static.use(..this);
			jump -> #(..this);
		};
		repeat !!do def def;
		hault;
		return;
	};
	let invalidFile<=>Error("invalid memory");
};
reg.weakScope()<:(reg){:checkKey_delete;
	:block;
	%char - keys.delete;
	if != 0 jump -> block..return;
	{:then;
		let finally;
		let showString = "delete";
		print(showString);
		{:saveRoot;//prevents deleting root directory
			:block;
			%currentDir - startDir;
			jump->finally if==0;
			//assert: %directoryToDelete != %startDir
		};
		${:ifBlock;
			[%currentDir+currentDir.parent.itemPtr] | 0;
			jump->ifBlock..return if!=0;
			[%currentDir+currentDir.parent] | 0;
			jump->ifBlock..return if!=0;
			error.Error("impossible case: itemPtr == null");
			//assert: currentDir.parent.itemPtr != null
		};
		%lastFile = [%currentDir+currentDir.parent];
		//assert: currentDir is invalid here and so is not readable
		let temp = reg(),temp1 = reg();
		{:removeReference;
			{//does `lastFile.links.set(currentDir,lastFile.links.pop())`
				:block;
				let temp = temp;
				[%lastFile+lastFile.links.size] -= 1;
				jump -> block..return if <= 0 !signed;//do not need to move items around if it's length is 1
				%temp = [%lastFile+lastFile.links.size];//= %+[lastFile.data.size-1]lastFile.data
				%temp += [%lastFile+lastFile.links.data];//= %[lastFile.data.size-1]lastFile.data*
				let lastItemOnArray = Item(lastFile.links,Pointer(File())) <-> temp;
				%lastItemOnArray = [%temp];//= %File* & [lastFile.data.size-1]lastFile.data ; last item in array
				%lastItemOnArray - %currentDir;
				jump -> block..return if == 0;//if currentDir is already the last item we can just do `lastFile.pop()`
				let itemPtr = Pointer(Item((),Pointer(File()))) <-> temp1;
				%itemPtr = [%currentDir+currentDir.parent.itemPtr];//:%File** & %currentDir**
				[%lastItemOnArray+lastItemOnArray.parent.itemPtr] = %itemPtr;
				[%itemPtr] = %lastItemOnArray;//:File* & lastItemOnArray*
			};
			{//finishes up the `lastFile.links.pop()`
				let array = Pointer()<:DynLenObjPtr()<->temp;//:%File().links*
				%array = [%currentDir+currentDir.parent];
				%array += Pointer(File()).links;
				array.pop(Pointer()<:File());//TODO: work out why this pops from currentDir.name instead of 'array'.
			};
		};
		let handleLinkDir(){
			%linkDir-%currentDir;
			jump->return..return if != 0;
			%linkDir = startDir;//BODGED todo: set it to null. TODO: change linkDir to a nullable type
		};
		{:handleCase_fileOnStatic;//BODGED
			handleLinkDir();//the deconstructor is not called on static memory
		};
		heap.unref(currentDir,reg.weakScope()<:(reg){
			let directoryToDelete = Pointer(File())<-> reg();
			%directoryToDelete = %currentDir;
			call static.use()<:{:unrefFile;
				handleLinkDir();
				{:unrefLinks;
					let i = usize() <-> temp;
					let links = Pointer()<:DynLenObjPtr().data <-> temp1;
					for_start_repeat(i,{//assume: File():DynLenObjPtr[]
						%i = [%directoryToDelete+directoryToDelete.links.size];
						%i -= 1;
						jump->unrefLinks..return if < 0 !signed;
						%links = [%directoryToDelete+directoryToDelete.links.data];
					},{
						:block;
						%directoryToDelete = [%links+%i];
						[%directoryToDelete+directoryToDelete.parent] - %currentDir;
						jump -> block..return if != 0;//only delete file is owned by directoryToDelete
						RegSet.save_onStack({i;links;directoryToDelete})<:(){heap.unref(directoryToDelete,{call unrefFile})};
					});
				};
				{:deleteFileArrays;
					let object = Pointer()<:DynLenObjPtr().slice.data<->temp;
					let deleteNullableObject = static()<:{
						let end;
						jump->end if == 0;
						heap.unref(object);
						return #def end;
					};
					%object = [%directoryToDelete+directoryToDelete.name.data];
					call deleteNullableObject.use();
					%object = [%directoryToDelete+directoryToDelete.links.data];
					call deleteNullableObject.use();
					%object = [%directoryToDelete+directoryToDelete.info.data];
					call deleteNullableObject.use();
					%object = [%directoryToDelete+directoryToDelete.data.data];
					call deleteNullableObject.use();
				};
				return;
			};
		});
		%currentDir = %lastFile;
		%lastFile = [%currentDir+currentDir.parent];
		def finally;
		print("\p00"...{repeat showString..length " "}..."\p00");
		jump->start;
	};
};
{:checkKey_exit;
	:block;
	%char - keys.exit;
	if != 0 jump -> block..return;
	{:then;
		def onExit;
	};
};
{:handleParentDir;
	let finally;//cleans data
	%char - keys.cd_parent;
	if != 0 jump -> finally;
	{:then;
		repeat 0 {//assume: root does not have a parent
			%currentDir - startDir;
			if == 0 jump -> finally;
		};
		%currentDir = [%currentDir+currentDir.parent];
		%lastFile = [%currentDir+currentDir.parent];
		jump -> start;
	};
	def finally{:else};
};
def reg.weakScope()<:(reg){:handleChar;//check for file and change directory
	let onFound,onFail;
	let onFound.newDir = Pointer()<:File();//new directory
	reg.weakScope()<:(reg){:searchDirForChar;
		let i = reg();
		let array = reg()<:Pointer()<:Item(File(),File().links.data);//:%File[]*
		let item = reg()<:Pointer()<:File();
		for_start_repeat(i,{
			%i = [%currentDir+currentDir.links.size];
			%i -= 1;
			jump->return..return if < 0 !signed;
			%array = [%currentDir+currentDir.links.data];
		},{
			%item = [%array+%i];
			#onFound.newDir <-> item;
			meta.assert(+item.name==0);{
				let name = {...item.name.slice} <-> item;//:%String slice*
				let temp = reg();
				%temp = [%name+item.name.data];//:%char[]*
				[%temp+0] - %char;
			};
			if == 0 jump->onFound;
		});
		meta.assert(+reg<+char);
	};
	#onFound{
		%currentDir = %newDir;
		jump-> return..return;
	}:>static.use();
	def onFail<=>reg.weakScope()<:(reg){:createFile;//create file if no file found
		:onFail;
		let oldReg = reg;
		let temp <-> reg();
		let string = String(1);
		let newFile:>reg()<:Pointer()<:File();
		let pushFile:>static();//:{@} & @()->() ; assigned later
		{:getNewFile;
			def let linkDir.paste{:handleLinkDir_paste;
				:block;
				%char - keys.paste;
				if != 0 jump -> block..return;
				%newFile = %linkDir;
				let stringLength;
				//assume: terminal is at \p00
				print({"paste"}::{#stringLength=..length});
				heap.ref(linkDir);
				call pushFile;//using a function for pushFile since we do not want to `cd` into the newFile
				RegSet.save_onStack(clearString.regsUsed)<:(){:clearScreen;
					%clearString.const_0 = 0;
					print("\p00",clearString.const_0,{});
					%clearString.stringLength = stringLength;
					call clearString;
					print("\p00",clearString.const_0,{});
				};
				jump -> start;//TODO print "paste" when doing this
			};
			let mallocInputOutputSet = RegSet.union(heap.malloc.inputs,heap.malloc.outputs);
			let saveSet1 = 
				RegSet.fromRegEnum(oldReg)
				:>RegSet.intersection(mallocInputOutputSet)
				:>RegSet.substract({newFile})
			;
			RegSet.save_onStack(
				RegSet.substract(saveSet1)
			)<:(){:initFile;
				//adds a new file with a link to the parent
				let store_linksArray<->reg1();//:%File[]*; assert: outlives heap.malloc
				RegSet.save_onStack(
					RegSet.intersection({currentDir},mallocInputOutputSet)//saves currentDir if need be
				)<:()->{
					let currentDir_onStack <-> 0;//:stack+currentDir
					{
						%heap.malloc.inputs.(0) = newFile.(¬Pointer).data..@..length;
						heap.malloc.call();
						%newFile = %heap.malloc.outputs.(0);
					};{:constructor;
						let startLinkLength <-> 2;//:#int
						meta.assert(startLinkLength >= 1,"needs 1 link back to parent");
						%heap.malloc.inputs.(0) = startLinkLength;
						heap.malloc.call();//note:newFile is valid here since we use the safer `malloc.call()` instead of `call malloc`
						[%newFile+newFile.links.data] = %heap.malloc.outputs.(0);
						meta.assert(+currentDir_onStack == 0);{
							let temp_currentDir <-> (newFile+1%14);//:% & %currentDir
							pop %temp_currentDir;
							[%newFile+newFile.parent] = %temp_currentDir;
							push %temp_currentDir;
							let temp = temp_currentDir;
							%temp += [%temp_currentDir+currentDir.links.size];
							[%newFile+newFile.parent.itemPtr] = %temp;
							delete temp_currentDir;
						};
						[%newFile+newFile.links.size] = 1;
						[%newFile+newFile.links.capacity] = startLinkLength;
						%store_linksArray = %heap.malloc.outputs.(0);
						{:init_OtherData;//unstable ; TODO: find but with malloc
							{:init_parent;};
							{:init_file_data;
								let startSize = 2;
								%heap.malloc.inputs.(0) = startSize;
								heap.malloc.call();
								[%newFile+newFile.data.data] = %heap.malloc.outputs.(0);
								[%newFile+newFile.data.size] = 0;//this line breaks the next malloc. `0xffff`
								[%newFile+newFile.data.capacity] = startSize;
								meta.repeat(malloc)<:(i){[%heap.malloc.outputs.(0)+i] = 0};
							};
							{:init_info;
								let startSize = 2;
								%heap.malloc.inputs.(0) = startSize;
								heap.malloc.call();
								[%newFile+newFile.info.data] = %heap.malloc.outputs.(0);
								[%newFile+newFile.info.size] = 0;
								[%newFile+newFile.info.capacity] = startSize;
								meta.repeat(malloc)<:(i){[%heap.malloc.outputs.(0)+i] = 0};
							};
						};
					};
					{:getNewFileName;
						let data = DynLenObjPtr().data<->temp;
						%data = [string.data];
						[%data+0] = %char;
						[string.size] = 1;
						let stringLength;//:#usize
						print({"new name file:\n"}::{#stringLength = ..length - 1});
						print.char(char);
						#stringLength += 1;
						readString(string);
						print("\n");
						RegSet.save_onStack(
							RegSet.intersection({
								newFile;store_linksArray;currentDir;linkDir
							},clearString.regsUsed)
						)<:(){
							%clearString.const_0 = 0;
							print("\p00",clearString.const_0,{});
							%clearString.stringLength = stringLength;
							call clearString;
							print("\n",clearString.const_0,{});
							%clearString.stringLength = [string.size];
							call clearString;
							print("\p00",clearString.const_0,{});
						};
						%temp = [string.data];
						[%newFile+newFile.name.data] = %temp;
						%temp = [string.size];
						[%newFile+newFile.name.size] = %temp;
						%temp = [string.capacity];
						[%newFile+newFile.name.capacity] = %temp;
					};
				};
				heap.checkValidObject.assert(newFile);
				[%store_linksArray+0] = %currentDir;
				{:refreshStringBuffer;
					%heap.malloc.inputs.(0) = 4;
					heap.malloc.call();//allocates new array for string
					[string.data] = %heap.malloc.outputs.(0);
				};
			};
		};
		call pushFile::{//does: currentDir.links.push(newFile)
			let links = Pointer()<:DynLenObjPtr() <-> temp;//:%File().links*&%File[]**
			%links = %currentDir;
			%links += currentDir.links;
			meta.assert(+newFile!=+DynLenObjPtr.push.outputs.newItem);
			RegSet.save_onStack({newFile;currentDir})<:()->{
				links.push(1);
				delete links;
				let currentDir = ¬;//is consumed, is invalid untill the end of this blockScope
			};
			meta.assert(+DynLenObjPtr.push.outputs.newItem!=+newFile);
			[%DynLenObjPtr.push.outputs.newItem] = %newFile;
			return;
		}:>static.use();
		{:changeDirectory;
			%lastFile = %currentDir;
			%currentDir = %newFile;
		};
		meta.assert(+reg<+char);
	};
	meta.assert(+reg<+char);
};
let stateReg = RegEnum()<:0xmin.Math.max(
	reg,reg.maxUsed,
	reg1,reg1.maxUsed,
);
#linkDir<->stateReg();
#lastFile<->stateReg();
jump->start;
{
	hault;
	def static.memory;
	def heap.data;
	#largeReg.compile();
};
//#..toJSON;
let myClass(){
	def let number = int();
}:>Trait.impl()<:(Self){
	let method{
		let .[¬Trait.asMethod.asm] = ¬;
		let use(state){#;
			#return = ..this;
			#static.use(..this);
		};
		let regsUsed;
		let reg = RegEnum();
		let inputs{
			def let self = Pointer()<:Self()<->reg();
			//function inputs
		};
		let outputs{
			def let self = inputs.self;
			//function outputs
		};
		{
			//function body
			print("hello world");
			return;
		};
		#regsUsed <-> reg;
	};
};
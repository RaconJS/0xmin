#"tptasm";#"len";
#"table";
...labelsof{
	import "std v1.0xmin";
	let heap = {import lib "heap.0xmin"};
	let static = Static();
	let meta.class()<-{
		#return = #(arguments[0] <=> this) || this;
	};
	let Object(label)={
		...run meta.class;
	}::{
		let pointer(label,size,struct)={
			...run meta.class;
			#return::{
				repeat !!struct let struct = struct..compile;
				repeat !!size let size = size;
				repeat !size let size = struct..@..length;
				...codeof labelsof struct;
			};
		}::{
			let printObject{//:@(%)->mutate
				RegEnum().blockScope()<:(reg){
					let obj = heap.Object.pointer=()<->reg();
					let size = reg();//:%sizeOf obj.data
					%size = [%obj-(-obj.next)];
					%size -= %obj;
					let const_0 = reg();
					print("@",const_0);
					#let const_0.is0 = 1;
					print.register(obj,const_0);
					print(":",const_0,{});
					print.register(size,const_0);
					print("{",const_0,{});
					let temp = {repeat 2 reg()};
					{:forLoop;
						let max = size;
						//max:%int !signed & []
						let i = temp[0];//:%obj+ !signed
						%max|0;
						jump->forLoop..return if==0;//"{}"
						%i = 0;
						def let loop;
						{:do;
							let v = temp[1];//:%[]obj
							%v = [%obj+%i];
							print.number.hexChar(v,const_0);
						};
						%i+=1;
						%i-%max;
						jump->forLoop..return if==0;
						{:onLoop;
							print(",",const_0,{});
						};
						jump->loop;
					};
					print("}\n");
				};
				return;
			}:>static();
			#set ..proto = Object;
			#set ..prototype..proto = Object..prototype;
			#set ..prototype{
				let print(){
					push r0;
					r0 = %this;
					call printObject:>static.use();
					pop r0;
				};
				let: def(size,constructor){
					let size = size || this.size;
					RegEnum(1).blockScope({this})<:(reg)=>{
						r0 = size;
						heap.malloc.call();
						%this = r0;
					};
					constructor;
				};
				let: undef(size,constructor){
					RegEnum(1).blockScope()<:(reg)=>{
						r0 = %this;
						heap.free.call();
					};
					constructor;
				};
				let: set(struct){
					let struct = struct..@||this.struct..@;
					let i = -1;
					repeat struct..length{
						[%this + #(i=i+1)] = struct.(i);
					};
				};
				let ref(outputReg){
					let output = outputReg;
					heap.ref(this);
				};
			};
			let prototype = ..this();
		};
	};
	let Ref(type,canBeNull)={//:#()->@Object*
		...run meta.class;
		let type = type;
	}::{
	};
	#print.register..splice(0,0)<:(){
		#print.number.charSet:>static.use();
	};
};
repeat 0 def let shiftTest = RegEnum().weakScope()<:(reg){
	let obj1:>reg():>Object.pointer=(8);
	let obj2:>reg():>Object.pointer=(4);
	obj1.def();
	obj2.def();
	obj1.undef();
	RegEnum(2).blockScope({obj2})<:(reg){
		%heap.shift.inputs.object = %obj2;
		%heap.shift.inputs.size = 10;
		heap.shift.call();
		%obj2 = %heap.shift.outputs.object;
	};
};
def let simpleTest = RegEnum().weakScope()<:(reg){
	let obj:>reg():>Object.pointer=(8);
	let obj1:>reg():>Object.pointer=(5);
	obj.def((),obj.set({1;2;4;7}));
	reg.blockScope()<:(reg){
		r0 = 5;
		heap.malloc.call();
		push r0;
			r0 = 10;
			heap.malloc.call();hlt;
		pop r0;
		//heap.free.call();
	};
	//obj.print();
	let temp = reg();
	reg.blockScope()<:(reg){
		r1 = 3;
		call heap.resize.use();
		if sign jump->static.use()<:{
			print("failed");
			print.register(0);
			jump->return..return;
		};
	};
	print("\n");
	obj.print();
	hlt;
};
repeat 0 def let mallocTest = RegEnum().weakScope()<:(reg){
	let obj1 = reg():>Object.pointer=(4);
	let obj2 = reg():>Object.pointer=(6);
	let temp = reg();
	let const_0 = reg();
	%const_0 = 0;
	${
		hlt;
		obj1.def(());
		hlt;
		meta.repeat(obj1.size)<:(i){%temp=0xf000;[%obj1+i]=%temp};
		obj2.def(());
		meta.repeat(obj2.size)<:(i){[%obj2+i]=0x000f};
		hlt;
		heap.free.call(obj1);
		print(".",const_0,{});
	}:>(do){:loop;
		do;
		jump -> loop;
	}();
};
repeat 0 RegEnum().weakScope()<:(reg){
	let Array(itemType)={//:%{size;itemType[]}*
		#return:>Object({
			let type = itemType;
			8 #def let length;
			#def items;
		});
		#return..proto = constructor..prototype;
		#return..super = constructor..supertype;
		#return..constructor = constructor;
	}::{
		#..prototype..proto = Object..prototype;
		#..supertype..super = Object..supertype;
		#..prototype{
			def
		};
	};
};
def static.memory;
def heap.data;
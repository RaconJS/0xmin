///SETTINGS, TEST
#"tptasm";#"len";//#"table";
//#"labels";
let main;
#main(){
	let terminal:>static();
	let titleScreen:>static();
	nop;//call titleScreen:>static.use();
	call terminal.(¬Static).use();
	#titleScreen{
		let string = {
			"\p00\c0f";
			def let logoString={
				// /0@$#\
				// \ZASM/
				"\c0f\/\c050\c04@\c0a$\c0b#\c0f\\\n";
				"\c0f\\\c05Z\c04A\c0aS\c0bM\c0f\/\n";
			};
			//ZeroXMin (0xmin)
			//Assembly
			//Small
			//Macro
			;
			//language
			"press any key\n";
			"to continue;\n\n";
		}..@;
		let const_0 = 0;
		print(string,const_0);
		#def awaitInput(const_0,(),{});
		let i = 1;
		let a = meta.forEach(string,(v){
			@(""...(¬" \n")[+v==+"\n"])
		})..@;
		print("\p00"...a,const_0,{});
	};
	let intoStringWithLen(string)={//#(#string)->@{length:int;char[length]}
		def let length;
		@(string..length);
		def let string;
		...codeof arguments.string;
	};
	#static.use({2});
	let osIsActive{0};
	let reset_OS_state{//@() -> mutations
		def let clearScreen{
			{:forLoop;
				let reg = RegEnum();
				let const_0 = reg();
				let i = reg();
				reg.weakScope()<:(){
					%i = #(16*12);
					def let loop;
					print({" "})
					%i -= 1;
					jump -> loop if >= 0;
				};
			};
		};
		def let resetTerminal{
			let const_0 = 1;
			push %const_0;
			%const_0 = 0;
			send %const_0 "\c00";
			bump %const_0;
			pop %const_0;
			delete const_0;
		};
		def let reset{
			sp = "\p00";//uses sp as a temp register
			[IO.cursorPos] = sp;
			sp = 0xffff;
			[osIsActive] = 0;
		};
		return;
	}:>static();
	#let shell;//
	#let kernal{
		...labelsof {:types;
			let Process()={
				def let registers{
					repeat 16:0;
					virtual ...labelsof codeof{
						ram => ..this;
						ram => ram 14;
						#def let sp;
						0;
						#def let ip;
						#def let programLocation;
					};
				};
				let .[¬Process];
			}::{
				let prototype = ..this();
				let ..prototype.size = prototype..compile..length;
				let ..prototype.load_resume(){
					let i = -1;
					let state;
					repeat 16:{
						#i = i + 1;
						$state => this + i;
						%i = [state];
					};
				};
				let ..prototype.save_pause(){
					let i = -1;
					let state;
					repeat 15:{
						#i = i + 1;
						$state => this + i;
						[state] = %i;
					};
					$state => state + 1;
					[state] = pop;
					sp -= 1;
				};
				let ..prototype.heap(){
					meta.unimplemented();
					%heap.malloc.inputs.(0) = this.size;
					call heap.malloc;
					repeat !!this[¬RegEnum]: {
						%this = heap.malloc.outputs.(0);
					};
				};
				let ..prototype.copyFrom(){
					;//UNFINISHED
				};
				let ..prototype.size = 16;
			};
			let Ref(contence)={//Ref<T>:@T*
				0;
				let contence = contence;
			};
			let Array(contence){//Array<T>:@T[]
				let contence = contence;
			};
		};
		let data{
			def let processes{} <=> Ref()<:Array()<:Process=();//processes:@([]heap & @Process[])*
			def let currentProcess{} <=> Process=();
		}:>static();
		let callProgram;//defined later;
		let syscall{:onInterupt;//@(commandNumber:%[int.ordinal]commands,%[])->%[]
			let inputs{
				def let command <-> 0;
			};
			push next;
			def let commands{//switch;
				let interupt{};
				let malloc = heap.malloc;
				let free = heap.free;
				let realloc = heap.realloc;
				let resize = heap.resize;
				let callProgram = kernal.callProgram;
			}::{
				#{
					let static = Static();
					let i = -1;
					let labels = ..labels;
					repeat labels..length: #..this[""... labels[i += 1]] = {
						@jump-> #(..this[""... labels[i]]:>static.use());
					}[0];
					def static.memory;
				};
			};
		};
		#set callProgram{//:(%@(...%[])->%[]*,argLen:%int,args:%int[argLen]*)->void
			//assume: all registers free
			let reg = RegEnum();
			let inputs{
				let programEntry:>reg();//:%{@}*
				let argsLength:>reg();//:%int.cardinal
				let args:>reg();//:%int[]*
			};
			let inputs.programEntry.stored = static(0);
			[inputs.programEntry.stored] = %inputs.programEntry;
			let zeroRegisters, assignRegs;
			let finalRegValue = {};//:{int[2]} & []static
			let tempValues;
			#assignRegs{
				let i = 14;
				repeat 2 null;
				repeat 14 {
					#i = i - 1;
					meta.if(+i >= reg)<:
						()<-{
							%i = [%inputs.args + i];
						}<:()<-{
							#meta.assert(i<14);
							let tempStore = static(0);
							#tempValues::{tempStore::{let reg = +i;}};//unreverses the order
						}
					;
				};
			};
			let i = -1;
			repeat tempValues..length {
				[tempValues.(i += 1).use()] = 0;
			};
			reg.weakScope()<:(reg){
				let tempReg = reg();
				%tempReg = assignRegs..return;
				%tempReg -= %inputs.argsLength;
				jump -> %tempReg;
			};
			def assignRegs;
			jump -> [zeroRegisters + %inputs.argsLength];
			//assert: all registers are free;
			def zeroRegisters{
				let i = -1;
				repeat 14 {
					#i = i + 1;
					meta.if(+i >= reg)<:
						()<-{
							%i = 0;
						}<:()<-{
							#meta.assert(i<14);
							let tempStore = static(0);
							#tempValues::{tempStore::{let reg = +i}};
						}
					;
				};
				repeat 2 null;
			};
			let i = -1;
			repeat tempValues..length {
				%tempValues.(i += 1).reg = [tempValues.(i).use()];
			};
			jump -> [inputs.programEntry.stored.use()];//assume: program returns
		};
	}:>static();
	#let OS{
		let syscall
	};
	import this "shell and terminal.0xmin";
	def let testFunction1{
		nop;//print function
		print("???");
		r0 = 0x1234;
		return;
	};
	def let testFunction2{
		nop;//print function
		print("hello world");
		return;
	};
	repeat 0 let FileSystem{
		let Type{
			import "type.0xmin";
			:self;
			#self<=>type...self;
			delete self;
		};
		...labelsof Type;
		let reg = RegEnum();
		let FileType(){
			#def let value{0};
		}::{
			#(){
				type FileType = #{
					[]enum & {
						isDirectory:#bool
						isExecutable:#bool
					}
				}
				FileType[]
			};
			let enum = meta.enum();
			let 
				Data(){
					;//:@&{isEnd:@bool,:int16}
				} <-> enum() ::{},
				Executable(){
					;
				} <-> enum() ::{},
				Folder(){
					;
				} <-> enum() ::{},
				Link(){
					;
				} <-> enum() ::{},
			;
		};
		let File(){
			def let name:>String();
			def let type:>FileType();
			def let data:>RefList.OwnedSource();
			def let parent:>NullableReference(File);
		}:>Type();
		let new{
			let parentFolder = File();//%File&Folder
			let reg = RegEnum();
			let newFile = File();
			#parentFolder<->RefList.OwnedSource.mallocRef.inputs.self;
			%RefList.OwnedSource.mallocRef.inputs.size = newFile..@..length;
			RefList.OwnedSource.mallocRef.use();
			let newItem = newFile<->RefList.OwnedSource.mallocRef.outputs.newItem;
			let regsUsed = 0xmin.Math.max(0,RefList.OwnedSource.mallocRef.regsUsed);
		};
	}:>static();
	repeat 0 #FileSystem[¬static].use();
};
...labelsof{
	import "std v1.0xmin";
};
let printHeap{
	print("\c0a#");
	def:(foo){
		let reg = RegEnum(0);
		let block = foo(reg);
		reg.blockScope()<:(){block};
	}()<:(reg){
		let page = heap.Page.pointer=()<-> reg();
		let nextPage = heap.Page.pointer=() <-> reg();
		let pageSize = heap.Page.pointer=() <-> reg();
		let isUsed = reg();
		%page = [heap.malloc.startPage];
		${:loop;
			%isUsed = [%page+page.isUsed];
			jump->loop..return if == 0;
			%nextPage = [%page+page.next];
			%pageSize = %nextPage;
			%pageSize -= %page;
			{:validateValues;
				
			};
			print.register(page);
			print.register(nextPage);
			print.register(isUsed);
			%page = %nextPage;
			jump->loop;
		};
	};
	print("\c0f");
	return;
}:>static();
let fullProgram(){
	def main();
	def static.memory;
	def heap.malloc;
	def heap.free;
	def heap.resize;
	def heap.memory;
};
fullProgram();
//#0xmin.settings.language("text");
//#..splice(0,-0);
//def ¬(""... ..toJSON);
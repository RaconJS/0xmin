#"ZASM3";
#"tptasm";
#"table";
...labelsof(){//use
	defer:return = {let=use};
	//rewriting
	let Dependancies(allocatorObj,ownerObject)={//:({object:{@}}|{@;[¬Dependancies]})[]
		let allocatorObj = allocatorObj;//:{@}?
		let object = ownerObject;//:{}?
	}::{
		let ..prototype{//to use without macros
			let use(object,allocatorObj){
				repeat !object[¬Dependancies] let object[¬Dependancies] = Dependancies(allocatorObj);
				let dependancy = object[¬Dependancies];
				#dependancy.object||=object;
				#this..indexOf(dependancy)||this..splice(-0,0,{ins dependancy});
				#return = object;
			};
			let compile(allocatorObj){
				let = static;//local symbol 'static:{@}'
				#allocatorObj = allocatorObj||this.allocatorObj||(static.data||static.memory||static);
				#this..flat..iterate((dependancies){
					repeat !dependancies[¬isDefined_symbol]#{
						let dependancies[¬isDefined_symbol] = allocatorObj;
						repeat !!dependancies.object #allocatorObj..splice(-0,0,{dependancies.object});
					};
				});
			};
		};
	};
	let use(object,allocatorObj,ownerObject)<-{
		#{
			let list = ownerObject[¬Dependancies]||[¬Dependancies];
			repeat !object[¬Dependancies] let object[¬Dependancies] = Dependancies(allocatorObj);
			let dependancy = object[¬Dependancies];
			#dependancy.object||=object;
			#list..indexOf(dependancy)||list..splice(-0,0,{ins dependancy});
			#return = object;
		};
	}::{
		let ..supertype{
			let =Dependancies;
		};
		
		let: new(allocatorObj,ownerObject)<-{//:#(({@}&[]global)?,{@}?)->Dependancies & mutate
			repeat !!ownerObject let ownerObject[¬Dependancies] = Dependancies(allocatorObj);
			repeat !ownerObject let .[¬Dependancies] = Dependancies(allocatorObj);
			#return = ownerObject&&ownerObject[¬Dependancies]||.[¬Dependancies];
		}::{
			let ..supertype{
				let =Dependancies;
			};
		};
		let compile(allocatorObj,ownerObject)<-{
			{
				let = static;//local symbol 'static:{@}'
				let dependancies = ownerObject[¬Dependancies]||[¬Dependancies]||..this;
				#allocatorObj = allocatorObj||dependancies.allocatorObj||(static.data||static.memory||static);
				#dependancies..flat..iterate((dependancies){
					repeat !dependancies[¬isDefined_symbol]#{
						let dependancies[¬isDefined_symbol] = allocatorObj;
						repeat !!dependancies.object #allocatorObj..splice(-0,0,{dependancies.object});
					};
				});
			};
		}::{
			let ..supertype{
				let =Dependancies;
				let isDefined_symbol;
			};
		};
		let get(obj){
			#return = obj[¬Dependancies]
		};
	};
	repeat 0 #{
		let Use(){
			(){
				;
			};
		}::{
			let: new(){
				
			};
		};
	};
	#(){:example;
		let bar{1;2;3};
		let baz{4;5;6};
		let foo1{
			#Use.new();
			use()<:bar;
			use()<:baz;
		};
		let foo2{
			let use = Use.new();
			use()<:bar;
		};
		let owner1{
			let use = Use.new();
			use()<:foo1.use;//
		};
		let owner2{
			let use = Use();
			use()<:foo1.use;
			use()<:foo2.use;
			#use.onUse ||= (data)=>{//onUse is only called at the very end, inside `(Use()).compile()`
				let i = 0;
				repeat data..length def data[i-=1];
				//lets say we want the data to be in reversed order
				#..this::{def data};
			};
		};
		foo.use.compile();
	};
	#(){:example;
		let a = {
			1;2;3
		};
		let static;
		defer: def static;
		let a{1;2;3};
		let b{4;
			#use.new();
			#use(a);1;
		};
		let c{5;
			#use.new();
			@use(a);
		};
		use.new();
		#use(c);
		:global;
		#use.compile(static);
	};
}();
...labelsof(){//type checking
	defer:#return={let=compairTypes,=Function};
	let Function(){
		;
	};
	let typeSymbol{
		let Value{let //:Symbol => Enum
			Raw,//default
			Invalid,
			//else value symbol
			;//:[]Enum
		}::{
			let get(v){
				#return = v;
				repeat !v #return = Raw;
			};
		};
		let Path{let//{#=>Symbol}
			Register(template){ins template}:>,// %T
			Pointer(template){ins template}:>,// *T
			Item(object,itemTemplate){ins let object,item=itemTemplate}:>,//[]U
			Index(owner,index){ins let=owner,=index}:>,//U+T
		};
		let Constraint;//:(Symbol => #(any,any)->#bool) & ([]Type|[](Template & T:Type))
		let Type{//:Symbol
			let U16;
			let I16;
			let Fx16;
			let Array(t){t};//where t:Template
		};
		let Cleanup{let//:Symbol => Enum
			Owned,
			Moved(t){t},//where t:{[¬Cleanup]}
		};
		let Code{//:Symbol
			let Entry,Current,Exit;//:Symbol => t:Template
			let finalCode;//:Symbol => c:@ ; used in '@:$(c)'
			(entry,exit,codeBlock){//:(Template,Template,{@})->Code&{@}
				def codeBlock;
				let .[¬Entry] = entry;
				let .[¬Exit] = exit;
				let .[¬Code] = return;
				let .[¬Type] = {ins Code,entry,exit};
			};
		};
	};
	let AddToSymbol(class,symbol){
		repeat !symbol #symbol = class;
		let foo = class..function;
		(){
			#return = foo(...arguments);
			#let return[¬symbol] = return;
		};
		#let class..function = return..function;
		#return = class;
	};
	let compairTypes(a,b,isStrictEquality){//:# & (#<->bool) & (#1&error:<T>{T;T}) | (#0&#path_to_value): 
		//isStrictEquality:#?
		//- checks 'a' is contained in 'b' i.e. 'a ⊆ b' e.g. {1} ⊆ {1;2} ; aka if 'a' is (contained in)/(is a less strict form of) than 'b'
		//- strict mode checks that a ⊆ b and a ⊇ b e.g. {1} = {1}
		let error = ¬;
		//idea: '?foo().a.b.c' '#def ?obj;' ; use '?' syntax to allow nullable objects, similar to '!jump->10;' in '#"0xmin";'
		#{
			:block;
			let recurValue = a..flat;
			let compairTypes_recursive(a,b,isStrictEquality){//:#(template,template,#?)->void
				repeat(1+isStrictEquality):#{
					let fail(reason){//:#(#)->break
						#error = reason;
						break block;
					};
					let isEqual(symbol){
						#
							  !!a[¬symbol]
							&&(a[¬symbol]!=b[¬symbol])
							//&&!+compairTypes_recursive(a[¬symbol],b[¬symbol],¬)
							&&fail({ins a[¬symbol],b[¬symbol]})
						;
					};
					let meetsConstraint(constraint,b){//constraint:#()->bool
						#constraint&&(constraint(b)||fail());
					};
					...labelsof typeSymbol;
					#(!!a..constructor&&(a..constructor!=b..constructor))&&fail({ins a..constructor,b..constructor});
					#isEqual(Type);
					#isEqual(Cleanup);
					#isEqual(Path);
					#meetsConstraint(a[¬Constraint],b);
					#meetsConstraint(a[¬Type][¬Constraint],b);
					repeat(!a[¬Value]||!!{Value.Valid;Value.Invalid}..indexOf(a[¬Value]..constructor))
						#a..iterate((v,i){
							recur recurValue #compairTypes_recursive(v,b[i],¬);
						})
					;
					repeat !!isStrictEquality #{let carry_a=a#a=b;#b=carry_a;};//swap them over for the reverse
				};
			};
			#compairTypes_recursive(a,b,isStrictEquality);
		};
		#return = {let fail=error}<->!error;//:#true
	};
	let compairTypes.jumpTo(caller_from,callee_to){
		...labelsof typeSymbol;
		#return = compairTypes(caller_from[¬Code.Current],callee_to[¬Code.Entry]);
	};
	let compairTypes.callFunction(caller_from,callee_to,input,output){
		...labelsof typeSymbol;
		#return =
			//check state lines up
				compairTypes(caller_from[¬Code.Current],callee_to[¬Code.Entry])
				&&compairTypes(callee_to[¬Code.Exit],caller_from[¬Code.Current])
			//compair function signiture
				&&compairTypes(input,callee_to.input)
				&&compairTypes(output,callee_to.output)
		;
	};
	let compairTypes.call.join(callee_to,callee_to){
		...labelsof typeSymbol;
		#return = compairTypes(callee_to[¬Code.Exit],callee_to[¬Code.Entry]);
	};
	#(){:example;
		...labelsof typeSymbol;
		let Int()={};
		let a{{let.[¬Type]=Int};Int()},
			b{{let.[¬Type]=Int}},
			c{let.[¬Type]=Int},
		;
		let foo{
			let input{def let a=Int(),b=Int()};
			let output{Int()};
			let call(in,out){
				repeat !+compairTypes({input;output},{in;out}) throw;
				let entryType <=> input;
				let exitType <=> output;
				//...labelsof in,out;
				repeat 0 {//code
					in.a.get();
					%input.a = $(in.a.get.final());
					in.b.get();
					%input.b = $(in.b.get.final());
					call ..this;
					def out[0].get();
					@:$(in.b.get.final()) = %output.(0);
				};
			};
		};
		#foo.call({Int();Int()},{Int();Int()});
		repeat !+compairTypes(a,b) throw "assertion failed";
	}();
	#(){:example;
		let add<=>Function()<:{
			def let enum = Enum(0);
			def let input{Register()<:Int()<->enum();Register()<:Int()<->enum()};
			def let output{def Register()<:Int()<->input[0]};
			%output.(0) = %input.(0);
			%output.(0) += %input.(1);
			repeat(+output[0]!=+print.number.input[0]) %print.number.input.(0) = %output.(0);
			call use(print.number);
			return;
		};
		let add1<=>Function()<:{
			let a=£%int(),b=£%int();
			£a+b;
		};
		//let add(a,b){a+b};
		let add2 = Function(a:£%int(),b:£%int(),int())::{//form design
			//idea, can use '(key:value)' for setting labels in the 'arguments' object
			//does 'let arguments.key = value'
			//idea: have ..operator[","] and ..operator[";"] for the end of short and long expressions.
			£a+b;
		};
		let add3 = Function()<:{//form design
			let input{def let a = %int()<->0, b = int()<->1};
			let output{def let c = %int()<->0};
			...labelsof input,output;
			£c = a + b;//c:#0 & %int
		};
		let enum = Enum(0);
		let a = Register()<:Int()<->enum();
		let b = Register()<:Int()<->enum();
		def add.call({owned(a);owned(b)},{owned(a)});
	};
}();
...labelsof(){
	defer:#return={let=Code,=Int};
	let Code(code)={let
		=code,//:{@}
		final{let isOwned},//:(%|{@}) & #{isOwned:bool&#?}
		memoryState{let
			freeRegisters={},//:%[]
			usedRegisters=0,//:#usize&%
		};
		def code;
	}::{
		let nextRegister(code){//#(c:Code)->% & mutate c
			let = code.memoryState.freeRegisters;
			let = code.memoryState.usedRegisters;
			#return = freeRegisters..splice(-1,1)[0]||{ins ¬+usedRegisters;#usedRegisters+=1}[0];
		};
		let freeRegister(code,register){//#(c:Code)->% & mutate c
			let = code.memoryState.freeRegisters;
			let = code.memoryState.usedRegisters;
			#(+usedRegisters == +register)&&{#usedRegisters-=1}||freeRegisters..splice(-0,0,{ins register});
		};
		let ..operators={let
			//.["_-_"],
			.["_ "](a){//end of shot expression
				;
			},
			.["_,"](a){//end of long expression
				#return = a.code;
			},
			.["_;"](a){//end of statement ; this may not be added and might just have ',' and ';' instead for short/long expressions 
				#return = a.code;
			},
		};
	};
	let Int(register)={
		let.[¬Code] = Code=({});
		...labelsof .[¬Code];
		#memoryState;
		repeat !!register #final <-> register;
		#final={
			:self;
			@%self;
			delete self;
			let isOwned = !!register&&{}||¬;
		};
		def .[¬Code];
	}::{
		let ..operators{let
			..proto = Code..operators,
			.["_+_"](a,b){
				let oper = {
					(a,b){@ $a + $b};
					(a,b){@ $a += $b;}
				};
				let oper.get = oper[0];
				let oper.assign = oper[1];
				#return=Int=();
				let =return.code,=return.final,=return.memoryState;
				repeat !(a[¬Code]&&b[¬Code]) throw "type error";
				#{
					...labelsof(v){let=v.freeRegisters,=v.usedRegisters}()<:return[¬Code].memoryState;
					#freeRegisters <=> 
						a.memoryState.freeRegisters...b.memoryState.freeRegisters
						¬..iterate({},(s,v,i,a){
							repeat(+i == +a..indexOf(v)) #s::{v};
						})
					;
					#usedRegisters <-> 0xmin.Math.max(a.memoryState.usedRegisters,b.memoryState.usedRegisters);
				};
				#code <=> {
					...codeof a.code;
					...codeof b.code;
					repeat(0*a.final!=0):{
						#a.final<->Code.nextRegister(return);
						#a.final.isOwned = {};
					};
					repeat(0*b.final!=0):{
						#b.final<->Code.nextRegister(return);
						#b.final.isOwned = {};
					};
					repeat !!a.final.isOwned: {Code.freeRegister(return,a.final)};
					...codeof:
						(!!a.final.isOwned && {
							#final<->a.final;
							let final.isOwned = a.final.isOwned;
							repeat !!b.final.isOwned: {Code.freeRegister(return,b.final)};
							debugger;
							oper.assign(final,b.final);
						})
						||(!!b.final.isOwned && {
							repeat !!a.final.isOwned: {Code.freeRegister(return,a.final)};
							#final<->b.final;
							oper.assign(final,a.final);
						})
						||({
							let = return[¬Code].final;
							let final.isOwned = {};
							#final<->Code.nextRegister(return);
							@: $final = $a.final;
							oper.assign(final,b.final);
						})
					;
					delete final;
				};
				#let ..constructor = Int;
			},
			//.[""](){},
		};
	};
}();
let a = Int();
let b = Int();
%a.final = 2;
%b.final = 3;
ins £ a + b + b;
//debugger c.code..@"label.code.map(v=>v.args.map(v=>typeof v == 'string'?v:v?.label?v.label?.lineNumber:v.number))";
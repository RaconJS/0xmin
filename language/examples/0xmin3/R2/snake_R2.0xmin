#"tptasm";#"table";
import lib "var_const.0xmin";
let segment(x,y)={
	#this<->¬(#(y&0xf)<<4|(x&0xf));
	#this<=>¬+this;
};
let snake{
	let len:>var(1);
	let pos=var()<=>{def let x=0;def let y=0};
	//repeat (16*12):segment(0,0);//:(y<<4|x)[]
	{
		#let ..this[0]=segment(8,6);
	};
}:>var();
let reset{
	[snake.len]=0;
	[snake.pos.x]=16/2;
	[snake.pos.y]=12/2;
};
let RegCounter(val)={
	#this<->val||0;
}::{#;..prototype{
	let next(){
		#return= +this;
		#this<->this+1;
	};
}};
let getInput(enum,output,wait){
	:this;
	let enum=RegCounter=(enum);
	repeat !output:let output=enum.next();
	let temp = output;
	let output=output;
	let port0 = enum.next();
	wait r temp;
	repeat !!wait:jump->this if sign;
	repeat ! wait:jump->this..return if sign;
	r port0=0;
	port r port0;
	{:loop;
		r temp = port r port0;
		jump->loop if;
	};
};
let mainLoop{
	
};
{:memory;
	def reset;
	def var,const;
};
#"tptasm";#"len";#"table";
let lamda(){//01010011
	/*(//hello_world
		v
			^<< << <<^<< << <<  p//H 1001000
			>> >>^<< << <<^ << <<^p//e 1100101
			^>> >> >>^<<^<< <<  p//l 1101100
			p//l 1101100
			>> ^ << ^ p//o 1101111
			v   ^<< << << << << p//"" 100000
			v^<<^<<^<< <<^<<^<<^p//w 1110111
			v^<<^<< <<^<<^<<^<<^p//o 1101111
			v^<<^<<^<< << <<^<< p//r 1110010
			v^<<^<< <<^<<^<< << p//l 1101100
			v^<<^<< << <<^<< << p//d 1100100
		v n
	)*/
	(and>or>t>f>+>*>
		or(and t f) t (+ f f) (* t f) 
	)
	(a>b>a b (a>b>b))//and
	(a>b>a (a>b>a) b)//or
	(a>b>a)//t
	(a>b>b)//f
	(a>b>(f>x>a f (b f x)))//+
	(a>b>(f>x>a (x>b f x) x))//*
}::{//p = print
	def let val{"0"};
	def let .["p"] {r1=0;send r1 [val]};
	def let .["<<"] {[val]<<=1};
	def let .[">>"] {[val]>>=1};
	def let .["^"] {[val]^=1};
	def let .["v"] {[val]=0};
	def let .["n"] {};
	delete val;
};
let heap{import lib "heap.0xmin";};
...(){
	let nextAddress{
		//#heap..splice(0,-0,{def ..this});
		0;
	};
	let m_class(class,argsLen,classConstructor,classDeconstructor)={
		//class:#Struct,constructor:#()->{@}
		let m_class=this..constructor;
		#class::{
			#class..proto=m_class..prototype;
			()={#..compile};
		};
		#class..prototype::{
			let new(){//:(...%[])->push[Context*]
				let rMemory = heap.malloc.inputs[0];
				r rMemory=this..length;
				let rMemory = heap.malloc.outputs[0];
				repeat 0 {:malloc;
					//quicker O(1) way of allocating memory
					let address= rMemory+1;//[%]*
					r address=r rMemory;
					r rMemory = [nextAddress];
					r rMemory += heap..return;
					[nextAddress] += r address;
				};
				repeat 1 call heap.malloc;
				#let i=this..length-1;
				repeat argsLen:{
					[r rMemory+i]=pop;//r arguments.(i);//argument
					#i=i-1;
				};
				:definer;
				let output=rMemory;//:%Object* aka %heap.Page*
				classConstructor(definer);
			};
			let addRef(){
				let rMemory=heap.malloc.outputs[0];
				pop rMemory;
				[r rMemory-#(heap.Page.prototype.data-heap.Page.prototype.isUsed)]+=1;
			};
			let delRef(){
				let rMemory=heap.malloc.outputs[0];
				pop r rMemory;
				[r rMemory-#(heap.Page.prototype.data-heap.Page.prototype.isUsed)]-=1;
				jump->..return if > 0;
				del();
			};
			#new::(){
				push r rMemory;
			};
			let del(){//:pop[this:Context*]
				classDeconstructor();
				call heap.free;
			};
		};
		#return=class;
	};
	let Context()={
		def let argument{0};//:Context*||InbuiltFunction*
		def let function{0};//:Function* && {@}*
		def let parent{0};//:Context*
	}:>m_class(2)<:{};
	//note: argument must come first so it isn't assigned when 'new' is called
	let Conxtext.Value()={//polymorph of Context
		def let argument{0};//:Context*||InbuiltFunction*
		def let function{0};//:Function* && {@}*
		def let value{0};//:Context*
	}:>m_class()<:{};
	let spareReg=heap.malloc.nextReg.n+1;
	let for_repeat(repeatNum,reg_i,do){//#(int,%,{@})->{@}
		repeat !!+repeatNum:{
			let i=reg_i;
			r i=repeatNum;
			def let loop{
				def do;
				r i-=1;
				jump->..this if > 0;
			};
		};
	};
	let getRecur(code){
		#return = code..flat..length;
	};
};
//note: 'a b > c d' --> 'a (b > (c d))'
//m_ == # aka meta
let parse(code,i,function,hasRecur,output)={//:(#(){...lambda code},builtInFunctions:{[""]:{@}})->{@}
	let returnValue;//:function
	//!!hasRecur => recur>1
	let line=code;
	repeat !hasRecur:{
		#line=code[0][0];
		#output={//extension object
			:this;
			let maxRecur=getRecur(line);
			let mainFoo=function=newFoo=({});
			let inputFunctions={...let set arguments[1]};
			let contexts={
				def let refs;
				1;//ref counter
				Context=()::{let refs=refs};
			};
			let functions{};
			def mainFoo<=>{...let mainFoo;}::{
				#let list=inputFunctions..labels,i1=0;
				repeat list..length:{#;
					let foo=inputFunctions[""...list[i1]];
					repeat!foo[¬newFoo]:{
						let contextReg=function.registers.context;//:%Context*
						let context=Context=()::{#function<=>{@:foo;}};
						let foo[¬newFoo]=context;//mark the input functions
						#set contexts::{
							#def let context.refs;
							1;//ref counter
							def context;
						};
						foo..splice(0,0,{
							push [r contextReg + contextReg.argument];
							[context.refs]+=1;//heap.ref(context)
						});
						foo..splice(-0,0,{jump->[sp+1]});
						let mainFoo.scope[""...list[i1]]=foo;
						//push end;
					};
					i1+=1;
				};
				{:main;
					let end{return};#end<->0;
					r newFoo..prototype.registers.context = #(contexts[2]);
					def block;
					def let ..this.getAns{
						let ans=2;//:%
						let ret=3;
						pop r ans;
						pop r ret;
						push r ans;
						pop r ans
					};
					#stackLevel=0;
					return;
					def contexts;
					def inputFunctions;
					undef newFoo;
					def newFoo;
				};
			};
			delete this;
			//$undef mainFoo;
		};//:0xmin[]
		repeat !line:#:{}[]ERROR;
		#i=0;
	};
	let oldI=i;
	#i=+i;
	let args=0;
	recur output.maxRecur:
	repeat (i<line..length&&(line..length-oldI)): {
		let word=line[i];
		let continue=1;//:bool
		repeat (word=="("): {//zero cost abstraction
			#i+=1;
			repeat !!line[i][1]
				#:{}[]ERROR;//silent error
			recur output.maxRecur: 
			repeat !!line[i]: #returnValue=parse(line[i][0],0,function,1,output);
			#i+=2;
			#continue=0;
			#args+=1;
		};
		let word=line[i];
		repeat ((args<2) && (line[i+1]==">")):{//function a>b ==> (a){#return=b}
			#i+=2;
			let foo1=newFoo({},function,""...word);
			#set output::{
				null;//start of function
				def foo1;
			};
			#returnValue=parse(line,i,foo1,1,output);
			{//removes repeated functions
				let r=output.functions..length;
				let i1=0;
				repeat r:{
					repeat ((""...output.functions[i1].string)==#(""...foo1.string)):{
						#r=0;//r = i1+1; aka break;
						$undef foo1;
						#foo1=output.functions[i1];
					};
					#i1+=1;
				};
				repeat (+r==output.functions..length):{
					#output.functions..splice(-0,0,{$def foo1});
				};
			};
			#function.addFoo(foo1);
			#set function.string{"(";...codeof foo1.string;")"};
			#continue=0;
			#args+=1;
		};
		let word=line[i];
		repeat ( (args<2) && !!word && (word!="(") && (word!=">")):{//word
			let value=function.scope[""...word];
			repeat !value:debugger (""...word);
			repeat !value#:{}[];//ERROR:value not defined
			#returnValue=function.addArg(value,function,output);
			#args+=1;
			#i+=1;
		};
		repeat(args>1):{
			#args-=1;
			#function.addCall();
		};
	};
	#oldI<->i;
	repeat !hasRecur repeat (args==0) #function.getAns<=>{};
	repeat !!hasRecur:#return = returnValue;
	repeat !hasRecur:#return = output;
}::{
	let ..prototype{
		let newFoo(code,function,argName)={//:Function
			let stackLevel=function.stackLevel+1||0;
			let scope{
				repeat !!argName:let ..this[""...argName]<->stackLevel;
				let ..proto=function.scope;
			};
			let numOfArgs=0;
			let block={...codeof code};
			let string=">";
			//this program does not clean up it's memory usage.
			//I have not learnt how to do that yet. This is fine for smaller lamda expressions.
			let addFoo(arg){//arg from heap
				//note: type Function == type {@} & @(pop[arg:Context*])->push[return:private*,ans:Context*]
				//arg:Function*
				#set block{
					def let addFoo{
						let foo=Context=();
						//new Context
							push arg;//function:Function*
							call newFoo.makeContextInstance;//:(pop Function*,Context*)->push Context*
					};
				};
				#return=arg;
			};
			let addArg(arg,scope,output){//arg on stack 'arg'
				//arg:index, scope:
				let isNormalArgument=!arg[¬newFoo];
				#set block{
					def let addArg{
						repeat !!+isNormalArgument:...set{
							let currentContext=+registers..length;//:%Context*
							#currentContext = Context=() <-> currentContext;
							let argNumber=getArg(arg,scope);
							#set string{...(" "...+argNumber);};
							let getParentContext(){
								repeat !getParentContext.isNotFirst:
									r currentContext = [r registers.context + registers.context.parent];
								repeat !!getParentContext.isNotFirst:
									r currentContext = [r currentContext + currentContext.parent];
								let getParentContext.isNotFirst;
							};
							#let fast=1;
							repeat !!fast: repeat argNumber:getParentContext();
							repeat !fast:...(){
								let i=2;//:%
								for_repeat(argNumber,i)<:getParentContext
							};
							let arg<->currentContext;
							repeat (+argNumber!=0):
								r arg=[r currentContext + currentContext.argument];
							repeat (+argNumber==0):
								r arg=[r registers.context + currentContext.argument];
							push r arg;//:push Context*
							heap.ref(arg);
						};
						repeat !+isNormalArgument:...set{//arg is an input function
							#set string{...("i"...+output.inputFunctions..indexOf(arg));};
							push #(arg[¬newFoo]);//:push Context*
						};
					};
				};
				#return=arg;
			};
			let addCall(){//stack={foo} //'(foo>...) arg'
				#set string{"c"};
				#set block{...set{
					def let addCall{
						//assume: stack has [foo:Context*,arg]
						call newFoo.function;
					};
				}};
			};
			let getArg(arg,scope){//assert:arg<=scope.stackLevel
				#return = scope.stackLevel-arg;
			};
			{
				def block;
				jump->[sp+1];
			};
		}::{
			let ..prototype{
				let swap{
					pop r1;//arg
					pop r2;//foo
					push r1;
					push r2;
				};
				let registers={
					def let context=Context=()<->0;
					def let fooInstance<->0;
				};
				let makeContextInstance{
					let ret=+spareReg;
					pop r ret;
					push r registers.context;//parent:Context*
					heap.ref(registers.context);
					let definer=foo.new();
					def let definer=Context=().new();
					let newContext=Context=()<->definer.rMemory;//:%Context*
					//assert:[newContext.parent] == context;
					r registers.context = [r newContext+newContext.parent];
					jump->r ret;
				};
			};
			let prototype=..this=();
			def let function{}<=>{
				...let ..prototype;
				//assume: stack has [foo:Context*,arg,ret]
				//:@(pop[context,arg,ret])->push[ans]
				push r registers.context;//callee's context
					//stack [context,arg,ret,parent]
					//assume: context=r0;
					let stack_context = 3;
					{//{@} & ()->push[ans]
						let arg = registers.context+1;
						let arg_stack = 2;
						r arg = [sp+arg_stack];
						r registers.context = [sp+stack_context];
						[r registers.context+registers.context.argument] = r arg;
						call [r registers.context + registers.context.function];
					};
					//stack [context,arg,ret,parent,ret1,ans]
					let ans <-> registers.context+1;
					let ret <-> registers.context+2;
					{//handle unrefs
						let arg = ans;
						let arg_stack=4;
						heap.unref(registers.context);
						//$delete registers.context
						r arg = [sp + arg_stack];
						heap.unref(arg);
					};

					pop r ans;
					sp+=1;//skip ret1
					pop r registers.context;//parent
					pop r ret;//ret
					sp+=1;//skip arg;
					[sp] = r ans;//replace context with ans
					//assert: stack = [ans]
				jump->r ret;
			};
			let makeContextInstance= ..prototype.makeContextInstance;
			def ..prototype.makeContextInstance;
		};
	};
};
let main=parse(lamda,lamda);
sp = 0x800;
call main;
def let end{
	hault;
	jump->0;
};
def main;
def heap;
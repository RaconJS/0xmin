#"tptasm";
let vec(x,y){
	let elements = arguments;
}::{
	:class;
	let template = ..this();
	let vecOper(a,b,foo){
		..this()<:{repeat 0xmin.Math.min(a..length,b..length):foo()[0];
	};
	#..operators{let
		.["+_"](a,b){
			#return <=> vecOper(a,b,(b){def +b});
		}::{#£..metaState.enter=#(template,template)->template¬()},
		.["-_"](a,b){
			#return <=> vecOper(a,b,(b){def -b});
		}::{#£..metaState.enter=#(template,template)->template¬()},
		.["_+_"](a,b){
			#return <=> vecOper(a,b,(a,b){def a+b});
		}::{#£..metaState.enter=#(template,template)->template¬()},
		.["_-_"](a,b){
			#return <=> vecOper(a,b,(a,b){def a-b});
		},
		.["_*_"](a,b){
			#return <=> vecOper(a,b,(a,b){def a*b});
		},
		.["_/_"](a,b){
			#return <=> vecOper(a,b,(a,b){def a/b});
		},
	};
};
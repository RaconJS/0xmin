let set throw(error){debugger"throw"...;}
let CpuState(oldState)={
	...labelsof constructor.prototype;
	let usedRegisters{};
	repeat !!oldState:{
		#set:usedRegisters<=>#{...codeof oldState};
	};
}::{
	let prototype{
		let var(val){#;
			let i=0;
			let data=this.usedRegisters;
			repeat data..length:{#;
				i+=1;
			};
			repeat#(+i>=14):{
				throw
			};
			return=Register();
		};
		let const(val){
			return = var(val)
		};
		let use(i){

		};
		let free(){
			
		};
	};
	let Register(i)={
		:this;
		void #set this<->i;
		void ...prototype;
	}::{
		let prototype{
			let use(val){

			};
			let free(){

			};
		};
	}
};
#(){
let state=CpuState();
let i=state.var();
i.free();
let b=state.const();
b.free();
let state=State(oldState);
};
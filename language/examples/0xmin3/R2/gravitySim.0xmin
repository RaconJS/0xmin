#"tptasm";#"len";#"table";
(){
	let main(){
		let main;
		jump->main;
		{
			def div;
			def mul;
			def sqrt;
			def dist;
			def force;
			def addForce;
			def doInteraction;
			def doStep;
			null;
			def var,const;
			null;
		};
		def main;
		{
			let scale=3;
			let i=-1;
			//repeat 2:#part(vec(0xmin.Math.random()*scale,0xmin.Math.random()*scale)):>addPart();
			#part(vec(8-2,6.0),vec(0,0.1)):>addPart();
			#part(vec(8+2,6.0),vec(0,-0.1)):>addPart();
			//#part(vec(4,5.0)):>addPart();
			call doStep;
			jump->main;
			hlt;
		};
		def partList;
	};
	...(){
		let float(x,val)={#;//fixed-point number
			repeat !x:x = 0;
			repeat !val:val = x;
			val=val*constructor.fixedPoint&0xffff;
			x<->val;
			x<=>val;
			return = x;
		}::{
			let fixedPointBitNumber = 8;
			let fixedPoint = 1<<fixedPointBitNumber;
			let toInt(reg){//reg:%float
				r reg>>(fixedPointBitNumber);
			};
		};
		let vec(_x,_y)={
			def let x:>float(_x||0);
			def let y:>float(_y||0);
		}:>m_class=();
		let part(_s,_v,_a)={
			def let s=_s||vec();
			def let v=_v||vec();
			def let a=_a||vec();
		}:>m_class=();
	};
	...(){
		let div{//@([sp+float],[sp+float]) -> float *sp
			//push a; push b; -> a/b
			let a=0,b=1,ans=2;//:%float
			let ret=3;//:[%] aka %ram* aka memoryAddress type_register
			let dp=4,b1=5;//:%float decimal point
			%ret=pop;
			%b=pop;
			%a=pop;
			//assume: %a>0,%b>0,all registers are free
			{	
				r dp = float.fixedPoint;
				r ans = 0;
				r b1 = r b;
				def:{//shift b<<end
					:loop;
					r a-= r b;
					{:ifBlock;
						jump->ifBlock..return if>=0;
						r a += r b;
						jump->loop..return;
					};
					r a += r b;
					r b<<=1;
					r dp<<=1;
					jump->loop if !=0;
				};
				//r b = r b1;
				//r dp=float.fixedPoint;
				def:{//loop_divide;
					:loop;
					r a-= r b;
					{:ifBlock;
						jump->ifBlock..return if>=0;
						r a += r b;
						r b>>=1;
						r dp>>=1;
						jump->loop if !=0;
					};
					r ans|=r dp;
					r b>>=1;
					r dp>>=1;
					jump->loop if !=0;
				};
			};
			push %ans;
			jump->%ret;
			let remainder=a;
		};
		let mul{
			let a=1,b=2,ans=3;//:float
			let ret=4;//:%(*)
			let a1=5,b1=6,temp=7;//:%float;//a1=tempory b, dp = decimalPoint 
			let sign=8;//:%int = a^b;
			pop r ret;
			pop r b;
			pop r a;
			let masks{
				def let low=float.fixedPoint-1;
				def let high=0xffff&(~low);
			};
			{
				{:handle_negativeFloats;
					r sign = r a;
					r sign ^= r b;
					r a= r a;
					def:{:block;
						jump->block..return if>=0;
						r a^=0xffff;
						r a+=1;
					};
					r b= r b;
					def:{:block;
						jump->block..return if>=0;
						r b^=0xffff;
						r b+=1;
					};
				};
				r ans=0;
				//>=1
				{//shift b<<end
					r a1 = r a;
					r b1 = r b;
					r b1 &=masks.high;
					def let loop;
					r temp = r b1;
					r temp &= float.fixedPoint;
					{:ifBlock;
						jump->ifBlock..return if==0;
						r ans += r a1;
					};
					r b1 >> = 1;
					def:{:ifBlock;//keep negative
						r b = r b;
						jump->ifBlock..return if>=0;
						r b1|= 0x8000;
					};
					r a1 << = 1;
					jump->loop if>0;
				};
				//<1
				{//shift b>>end
					r a1 = r a;
					r b1 = r b;
					r b1 &=masks.low;
					def let shift{
						r a1 >> = 1;
						r b1 << = 1;
					};
					:block;
					jump->block..return if<=0;
					delete block;
					def let loop;
					r temp = r b1;
					r temp &= float.fixedPoint;
					{:ifBlock;
						jump->ifBlock..return if==0;
						r ans += r a1;
					};
					$def shift;
					jump->loop if>0;
				};
				{:signs;
					jump->signs..return if>=0;
					r ans^=0xffff;
					r ans+=1;//ans = -ans;
					//	r ans ~= r ans;
				};
				//<1
			};
			push r ans;
			jump->r ret;
		};
		let sqrt{
			//assert div uses r0 to r4
			let a=6,ans=7;//:float
			let ret=8;//:%(*)
			let oldAns=9,temp=5;//:%float;//a1=tempory b, dp = decimalPoint 
			pop r ret;
			pop r a;
			{
				r ans=r a;//float(4);//random guess
				def let loop;
				r oldAns = r ans;
				push r a;
				push r ans;
				call div;// a/ans
				{
					let div_a_ans=temp;
					//r div.remainder>>=1;
					//r ans+= r div.remainder;//ans = ans+a/ans
					repeat 0 {
						let remainder=div.remainder;
						r remainder^=1;
						let next;
						jump->next if!=0;
						r ans += 1;//if remainder == 1 then ans--
						def next;
						let next;
						r remainder^=#(1^-1&0xffff);
						jump->next if!=0;
						r ans -= 1;//if remainder == -1 then ans--
						def next;
					};
					r div_a_ans = pop;//temp = a/ans;
					r ans+= r div_a_ans;//ans = ans+a/ans
				};
				r ans>>=1;//ans = (a/ans+ans)/2
				r oldAns^=r ans;
				jump->loop if!=0;
			};
			push r ans;
			jump->r ret;
		};
	};
	...(){
		let dist{//@(pop vec* a,vec* b)->push float
			let ret = 0;//:%* aka [%] aka %void*
			let a=vec():>type_register_pointer(1);//:%vec*
			let b=vec():>type_register_pointer(2);//:%vec*
			let ans=3;//:%float
			let dif={ans;a};
			r ret = pop;
			r b = pop;
			r a = pop;
			{
				//a.x-b.x
					r dif.(0) = [r a + a.x];
					r dif.(0)-= [r b + b.x];
				//a.y-b.y
					r dif.(1) = [r a + a.y];
					r dif.(1)-= [r b + b.y];
				//----
				//delete a
				//square dif.x,dif.y
				push 0x1234;//ans
				push r ret;
				push r dif.(0);
				push r dif.(0);
				push r dif.(1);
				push r dif.(1);
				//delete all;
				call mul;
				{r0 = pop;//[sp+1]=pop;
				[sp+3]=r0};//:ans=pop
				call mul;
				r0 = pop;
				r0+=[sp+1];//:ans+=pop
				push r0;
				//x*x+y*y
				call sqrt;//sqrt(x*x+y*y)
				{r0=pop;//[sp+1]=pop;
				[sp+1]=r0};
			};
			return;
		};
		let force{//@(pop float x) -> push float x
			//assume: div uses r0 to r5
			let ret = 6;//:[%]
			let dist = 7;//:%float
			let g = float(2.0);
			r ret = pop;
			r dist = pop;
			{
				//1/x**3
				//dist -> x**3 -> 1/x -> 
				r dist += float(0x8/0x100);
				push g;
				push r dist;
				call div;
				push r dist;
				call div;
				push r dist;
				call div;
				//[sp] = g/(dist+0x0.1)**3

			};
			jump->r ret;
		};
		let addForce{//@(pop part* a,pop part* b,pop float force)->push part* a,b & mutate (a.a, b.a)
			let a=part=()<->0,b=part=()<->1;//a,b:%part*;
			let force=2;//:float
			let ret=3;
			r ret = pop;
			r force = pop;
			r b = pop;
			r a = pop;
			let data{
				#def let a{0};
				#def let b{0};
				#def let ret{0};
				#def let force{0};
				#def let dif{0};
			};
			{
				let dif:>float()<->4;
				$undef dif;
				r force>>=1;//force/=2;
				{
					[data.a]=r a;
					[data.b]=r b;
					[data.ret]=r ret;
					[data.force]=r force;
				};
				r dif = [r a + a.s.x];
				r dif -= [r b + b.s.x];
				push r dif;
				push r force;
				r dif = [r a + a.s.y];
				r dif -= [r b + b.s.y];
				push r dif;
				push r force;
				call mul;//dif.y*force
				[data.dif]=pop;
				call mul;//dif.x*force
				let dif={4;5};
				r dif.(0)=pop;
				r dif.(1)=[data.dif];
				//dif = (a-b)/2*force
				r a = [data.a];
				r b = [data.b];
				[r a + a.a.x]+=r dif.(0);//idk why these are reversed it should be a-=dif. but it only works reversed like this
				[r a + a.a.y]+=r dif.(1);
				[r b + b.a.x]-=r dif.(0);
				[r b + b.a.y]-=r dif.(1);
			};
			push r a;
			push r b;
			jump->[data.ret];
			def data;
		};
		let doInteraction{
			//@(pop part* a,pop part* b)->push part* a, b
			let a=part=()<->0,b=part=()<->1;//a,b:%part*;
			let ret=10;
			let ans=a;
			r ret = pop;
			r b = pop;
			r a = pop;
			{
				//addForce<:
					push r b;
					push r a;
					//force
						//dist<:
							push r a;
							push r b;
						call dist;
					call force;
				call addForce;//sp=ret-1
			};
			jump->r ret;
		};
		let partList{
			let length;//:int
		};
		let addPart(part){
			#partList::{def part};
			#partList.length<->partList..length-1;
			#return = part;
		};
		let forLoop(start,while,next,do,end)={//(...((sp int,sp,{@})->{@})[])->{@}
			let stack=0;//:sp
			let i;//:sp int
			start(i,stack,this);
			#def let loop;
			while(i,stack,this);
			let stack1<->stack;
			let endBlock;
			jump->endBlock if<=0;
			do(i,stack1,this);
			next(i,stack,this);
			jump->loop;
			def endBlock;
			#def end(i,stack,this)||{pop r0};
		};
		let drawPart(char,isReg){//:(pop part*,char) -> push part*
			let scale = 1;//:#int
			let a=part():>type_register_pointer(0);//:%part*
			let moveCurser=1;//:%char
			let coords = vec():>type_register(2);//%[] & vec
			r a = [sp];
			r coords.x = [r a + a.s.x];
			r coords.y = [r a + a.s.y];
			{:scaleCoords;//c*4
				r coords.x>>(float.fixedPointBitNumber);
				r coords.y>>(float.fixedPointBitNumber);
			};
			{//get
				r coords.x&=0xf;
				r coords.y&=0xf;
				r moveCurser = r coords.y;
				r moveCurser << 4;
				r moveCurser |= r coords.x;
				r moveCurser |= "\p00";
			};
			let const_0=4;
			r const_0=0;
			send r const_0 r moveCurser;
			repeat !+isReg:send r const_0 char.(0);
			repeat !!+isReg:send r const_0 r char;
		};
		let doStep{
			let partSize = part=().size;
			//type sp : stack* | [stack]
			let loop{
				let start(i,stack){
					push partList;//:part*
					#stack<->-1;
					#i<->-1;//sp part*
				};
				let while(i,stack){
					r0 = partList..return;
					r0-= [sp+(i-stack)];
				};
				let next(i,stack){
					[sp+(i-stack)]+=partSize;
				};
				let end(){pop r0};
			};
			//update possisions a,v,s
			let n=13;//:%char
			%n="0";
			forLoop(loop.start,loop.while,loop.next)
			<:(i,stack,loopI){
				def let draw= drawPart(" ");
				...labelsof draw;//a:%part*,coords:%[]vec,const_0:% int 0
				let carry = const_0;//:%float
				r carry = [r a + a.a.x];
				[r a + a.v.x] += r carry;
				[r a + a.a.x] = 0;
				r carry = [r a + a.a.y];
				[r a + a.v.y] += r carry;
				[r a + a.a.y] = 0;

				r carry = [r a + a.v.x];
				[r a + a.s.x] += r carry;
				r carry = [r a + a.v.y];
				[r a + a.s.y] += r carry;
				drawPart(n,1);
				%n+=1;
			}<:loop.end;
			//interactions
			forLoop()
			<:loop.start
			<:loop.while
			<:loop.next
			<:(i,stack,loopI){
				forLoop()
				<:(j,stack){
					push partList;//part*
					#stack<->-2;
					#j<->-2;//:sp part*
				}
				<:loop.while
				<:loop.next
				<:(j,stack,loopJ){
					let a=0,b=a;//:%part*
					call doInteraction;
				}<:loop.end;
			}<:loop.end;
			return;
		};
	};
	main();
};
...(){
	import lib "var_const.0xmin";
	let m_function(function)={#;//#(@stackFunction)->:stackFunction
		repeat !inLen:inLen = 0;
		repeat !outLen:outLen = 0;
		let ret=0;
		#function..splice(0,0,{
			let i=0;
			repeat function.inputs..length:{
				pop r function.inputs[i];
				#i=i+1;
			};
		})..splice(-0,0,{
			let i=0;
			repeat function.outputs..length:{
				push r function.outputs[i];
				#i=i+1;
			};
			jump->r ret;
		});
		#return = function;
	};
	let m_class(class,argsLen,classConstructor)={//class constructor
		//(#()->{...{@}[]},int,#()->@()->{@}*)->#Class(...properties)->{@;#}..compile
		//classConstructor is called by class.new();
		let m_class=this..constructor;
		repeat !argsLen:#argsLen=class..length;
		#let set class..prototype..prototype=constructor.prototype;
		#class..proto=m_class..prototype;
		#class::{()={
			repeat !size:let size=..compile..length;
			#..compile;
		}};
		#class..prototype::{
			repeat !argsLen;
			let new(){//:(...%[])->push[Context*]
				let rMemory = heap.malloc.inputs[0];
				r rMemory=this..length;
				let rMemory = heap.malloc.outputs[0];
				call heap.malloc;
				#let i=this..length-1;
				repeat argsLen:{
					[r rMemory+i]=pop;//r arguments.(i);//argument
					#i=i-1;
				};
				classConstructor();
			};
			let:set(){
				#{:forEach;
					let i=0;
					repeat arguments..length:...(){
						#this[i]<=>{def arguments[i]};
						#i+=1;
					};
					delete i;
				};
				#return = this;
			};
			#new::(){
				push r rMemory;
			};
			let del(){//:pop[this:Context*]
				let rMemory = heap.malloc.outputs[0];
				pop r rMemory;
				call heap.free;
			};
		};
		#return=class;
	};
	#...let{
		let dataType(class){#;
			let symbol;
			return = class;
			class..proto=constructor..prototype;
			class::{(object){#let object[¬symbol];}};
		}::{
			let ..prototype{
				let has(object){#;//:bool
					:a;#a<->!!object[¬symbol];
					delete;
				};
			};
		};
		//(instanceObject)->dataSubType
		let type_register(object,startAt)={#;//:#(struct)->%[] struct aka an object across multiple registers
			repeat !startAt:startAt=0;
			object..splice(0,0,{$set ram=>startAt});
			object..compile;
			object..splice(0,1);
			object<->startAt;
			return = object;
		}:>dataType();
		let type_register_pointer(object,registerNum)={#;//:#(struct,%)->%struct* aka [%type]
			repeat !registerNum:registerNum=0;
			object..splice(0,0,{$set ram=>0});
			object..compile;
			object..splice(0,1);
			object<->registerNum;
			return = object;
		}:>dataType();//type->type*
		let memoryAddress(object,location)={#;//:#(type)->type*
			repeat !!location:{
				object..splice(0,0,{$set ram=>location});
				object..compile;
				object..splice(0,1);
				object<->location;
			};
			return = object;
		}:>dataType();
		delete dataType;
	};
};
... ..this[0];
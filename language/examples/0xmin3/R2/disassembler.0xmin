#"tptasm";#"len";//#"table";
//
//@: operation arg1 arg2
//arg: {has []?;has %?;has int}
import lib "var_const.0xmin";
let readHigh(rOut,rAddress){//#(rOut:%, %int*)->@ & mutate rOut
	@(0x11100001|(rOut&0xf<<8)|(rAddress&0xf<<4));
};
let regs{
	let address;//:%@*
	let valueBlueBits;//:%
	let valueRedBits;//:%
	let const0;//:% & %0
	let opcodeClass;
	let opandType;
	let temp1;
	let temp2;
};
#regs{
	#{
		let i=-1;
		repeat (¬..labels)..length:{
			#..this[""...(¬..labels)[i+=1]]<->i;
		};
	};
};
...labelsof regs;
let data {
	0#def let valueBlueBits;
	0#def let valueRedBits;

	0#def let oper;
	0#def let jumpType;
	0#def let R1;
	0#def let R2;
	0#def let RB;
	0#def let I1;
	0#def let I2;
	0#def let opcodeClass;//:enum(0,P,S,PS)
	
	0#def let opandType;
}:>var();
//0x00800000 -> '[X +/- Y]'
//0x00008000 -> '- Y'
//
//code, string, r1Shift, r2Shift, rBShift, i1Shift, i2Shift
let print(string,reg_const0,const0_is0)={
	let i=-1;
	repeat !reg_const0:#reg_const0 = constructor.const0;
	#constructor.const0 = reg_const0;
	repeat (!const0_is0 || !+const0_is0) r reg_const0 = 0;
	repeat string..length send r reg_const0 string.(i+=1);
}::{let const0 = 0;};

let printHex(reg_number,reg_const0)={
	repeat !reg_number:throw "expected input 'number : %int'";
	repeat !reg_const0:throw "expected input 'const0: %int = 0'";
	send r reg_const0 [intToHexMap+r reg_number];
}::{#let set ..prototype{
	let intToHexMap = "0123456789ABCDEF":>var();
}};
let colours{
	let command = "\c0c",
		number = "\c0f",
		register = "\c0b",
		bracket = "\c0e",
		addSub = "\c0c",
		jumpType = "\c0d",
		default = "\c0f";
};
let printHexFixed(reg_number,reg_temp,reg_const0,length)={
	repeat !reg_number:throw "expected input 'number : %int'";
	repeat !reg_temp:throw "expected input 'temp : %int'";
	repeat !reg_const0:throw "expected input 'const0: %int = 0'";
	repeat !length:#length = 4;
	repeat (+length!=4)r reg_number <<<= #(16-(length*4));
	repeat length:{
		r reg_temp = 0;
		r reg_number <<<= 4;
		r reg_temp <<= 4 +internal;
		send r reg_const0 [intToHexMap+r reg_temp];
	};
}::{let set ..prototype <=> printHex..prototype};
let printHexN(reg_number,reg_temp,reg_const0,length)={
	repeat !reg_number:throw "expected input 'number : %int'";
	repeat !reg_temp:throw "expected input 'temp : %int'";
	repeat !reg_const0:throw "expected input 'const0: %int = 0'";
	repeat !length:#length = 4;
	let endLoop;
	{:handle_0;
		r reg_number |= 0;
		let print0 = {print("0",reg_const0,1);jump -> ..return};
		jump -> print0..return if != 0;
		def print0;
	};
	let loop;
	r reg_number &= 0xf000 !store;
	jump -> loop..return if != 0;
	def loop{//skip leading 0's
		r reg_number <<= 4;
		r reg_number &= 0xf000 !store;
		jump -> loop if == 0;
	};
	def let loop{
		r reg_temp = 0;
		r reg_number <<= 4;
		r reg_temp <<= 4 +internal;
		:block;
		jump->block..return if == 0;
		send r reg_const0 [intToHexMap+r reg_temp];
		r reg_number |= 0;
		jump -> loop if != 0;
	};
	def endLoop;
}::{let set ..prototype <=> printHex..prototype};
let error(msg){
	null;//ERROR
	print("\c04\pa0ERROR:",13,1);
	print(msg);
	hault;
};
let a;
let opcodeHashTable{
	//e.g. 'P += S'
	//map(opcode => {enum(0,P,S,PS);@[4];@return})
}:>var();//:Opcode*[]
let jumpHashTable:>var();//:{@}*[] & Opcode*[] & []Opcode[]*[]
let opandTypeHandler{//prints operation arguments
	let opandTypeHashTable{//:{@}*[4][] & {arg1;arg2;arg1InRam;arg2InRam}[]
		let itemLength = 4;//note: the length is 4 so '@%index<<2' can be done. 
		let argHandlers{
			let
			none{
				return;
			}:>var(),
			R1{
				r temp1 = [data.R1];
				print(""...colours.register..."r",const0,1);
				printHex(temp1,const0,1);
				return;
			}:>var(),
			R2{
				r temp1 = [data.R2];
				print(""...colours.register..."r",const0,1);
				printHex(temp1,const0,1);
				return;
			}:>var(),
			RB{
				r temp1 = [data.RB];
				print(""...colours.register..."r",const0,1);
				printHex(temp1,const0,1);
				return;
			}:>var(),
			I1{//U11 or U16
				print(""...colours.number,const0,1);
				r temp1 = [data.I1];
				def:{:skipHighBits;
					:block;
					r valueRedBits &= 0x0080 !store;//if RB is used then print U11
					jump -> block..return if == 0;
					r temp1&=0x7ff;
				};
				printHexN(temp1,temp2,const0,4);
				return;
			}:>var(),
			I2{//I2 is always U4
				print(""...colours.number,const0,1);
				r temp1 = [data.I2];
				printHex(temp1,const0,1);
				return;
			}:>var(),
			fromRam{
				print(""...colours.bracket..."[",const0,1);
				def let includeRB{
					r valueRedBits &= 0x0080 !store;
					jump -> includeRB..return if == 0;
					call RB;
					def let addOrSubRB{
						r valueBlueBits &= 0x8000 !store;
						let add;
						jump -> add if == 0;
						print(""...colours.addSub..."-",const0,1);
						jump -> ..return;
						def add{print(""...colours.addSub..."+",const0,1)};
					};
				};
				call [r opandType + 2];
				delete includeRB;
				print(""...colours.bracket..."]",const0,1);
				return;
			}:>var(),
		};
		...codeof{
			...labelsof argHandlers;
			//:{arg1;arg2;arg1InRam;arg2InRam}[]
			{@;R1;R2;none;   none};//0: R1 R2
			{@;R1;fromRam;R2;none};//1: R1 [R2]
			{@;R1;I1;none;   none};//2: R1 U16_I1
			{@;R1;fromRam;I1;none};//3: R1 [U16_I1]
			{@;fromRam;R2;R1;none};//4: [R1] R2
			{@;fromRam;R2;I1;none};//5: [U16_I1] R2
			{@;fromRam;I1;R1;none};//6: [R1] U16_I1
			{@;fromRam;I2;I1;none};//7: [U16_I1] U4_I2
			//note: 8-F are the same except `1:X [Y]` -> `9:X [RB+Y]`
		};
	}:>var();
	print("\c0f",const0,1);
	{:getArguments;
		let temp <-> opandType;
		let arg <-> temp;
		{:R1_I2;//shift 0
			r arg = r valueBlueBits;
			r arg &= 0xf;
			[data.R1] = r arg;
			[data.I2] = r arg;
		};
		{:I1_R2;//shift 4
			r arg = r valueBlueBits;
			r temp2 = r valueRedBits;
			r temp2 >>= 4;
			r arg >>= 4 +internal;
			[data.I1] = r arg;
			r arg &= 0xf;
			[data.R2] &= r arg;
		};
		{:RB;//shift 16
			r temp2 = r valueRedBits;
			r temp2 &= 0xf;
			[data.RB] = r temp2;
		}
	};
	r opandType = r valueRedBits;
	r opandType >>= #(4 - 2);//>>4, *itemLength; assume:itemLength == 4
	r opandType &= #(0x7 * 4);
	[data.opandType] = r opandType;
	r opandType += opandTypeHashTable;//opandType:%(@()->print)*[4]*
	[data.opcodeClass] = r opcodeClass;
	r opcodeClass -= 1 !store;
	let if(condision,then,else)={
		condision(then,else);
		then;
		jump -> this..return;
		else;
	};
	def if()<:(then,else)=>{
		r opcodeClass |= 0;
		jump -> ..return if == 0;
		print(" ",const0,1);
		r opcodeClass -= 1 !store;
		jump -> else if != 0;
	}<:{call [r opandType + 0]}//then
	<:if()<:(then,else)=>{//else if
		r opcodeClass -= 2 !store;
		jump -> else if != 0;
	}<:{call [r opandType + 1]}//then
	<:{//else
		call [r opandType + 0];
		print(" ",const0,1);
		call [r opandType + 1];
	};
};
let Opcode(name,0_P_S_PS){
	let name = name;
	print(name,const0,1);
	r opcodeClass = 0_P_S_PS;
	jump -> opandTypeHandler;
};//:{@}
let opcodes = #(){//:{@}[] & Opcode[]
	(+R=)	adc 	PS 	add with carry 	yes 	1 	0x25000000;
	(+R)	adcs 	PS 	non-storing add with carry 	yes 	1 	0x2D000000;
	(+=)	add 	PS 	add 	yes 	1 	0x24000000;
	(+)	adds 	PS 	non-storing add 	yes 	1 	0x2C000000;
	(&=)	and 	PS 	bitwise AND 	yes 	1 	0x21000000;
	(&)	ands 	PS 	non-storing bitwise AND 	yes 	1 	0x29000000;
	(!)	bump 	P 	send attention request 	no 	1 	0x38000000;
	(call)	call 	S 	call subroutine 	no 	2 	0x3E000000;
	(-R)	cmb 	PS 	compare with borrow 	yes 	1 	0x2F000000;
	(-)	cmp 	PS 	compare 	yes 	1 	0x2E000000;
	(hlt)	hlt 	0 	halt execution 	no 	1 	0x30000000;
	(>)	ja 	S 	jump if above 	no 	1 	0x3100000F;
	//(>=)	jae 	S 	jump if above or equal 	no 	1 	0x31000003;
	(<)	jb 	S 	jump if below 	no 	1 	0x31000002;
	(<=)	jbe 	S 	jump if below or equal 	no 	1 	0x3100000E;
	(c)	jc 	S 	jump if carry set 	no 	1 	0x31000002;
	(==)	je 	S 	jump if equal 	no 	1 	0x31000008;
	(>)	jg 	S 	jump if greater 	no 	1 	0x3100000B;
	(>=)	jge 	S 	jump if greater or equal 	no 	1 	0x3100000D;
	(<)	jl 	S 	jump if lower 	no 	1 	0x3100000C;
	(<=)	jle 	S 	jump if lower or equal 	no 	1 	0x3100000A;
	()	jmp 	S 	jump unconditionally 	no 	1 	0x31000000;
	//(nop)	jn 	S 	jump never 	no 	1 	0x31000001;
	//(<=)	jna 	S 	jump if not above 	no 	1 	0x3100000E;
	//(<)	jnae 	S 	jump if not above or equal 	no 	1 	0x31000002;
	//(>=)	jnb 	S 	jump if not below 	no 	1 	0x31000003;
	//(>)	jnbe 	S 	jump if not below or equal 	no 	1 	0x3100000F;
	(!c)	jnc 	S 	jump if carry unset 	no 	1 	0x31000003;
	(!=)	jne 	S 	jump if not equal 	no 	1 	0x31000009;
	//(<=)	jng 	S 	jump if not greater 	no 	1 	0x3100000A;
	//(<)	jnge 	S 	jump if not greater or equal 	no 	1 	0x3100000C;
	//(>=)	jnl 	S 	jump if not lower 	no 	1 	0x3100000D;
	//(>)	jnle 	S 	jump if not lower or equal 	no 	1 	0x3100000B;
	(!o)	jno 	S 	jump if overflow unset 	no 	1 	0x31000005;
	(!s)	jns 	S 	jump if sign unset 	no 	1 	0x31000007;
	//(!0)	jnz 	S 	jump if not zero 	no 	1 	0x31000009;
	(o)	jo 	S 	jump if overflow set 	no 	1 	0x31000004;
	(s)	js 	S 	jump if sign set 	no 	1 	0x31000006;
	//(0)	jz 	S 	jump if zero 	no 	1 	0x31000008;
	(=)	mov 	PS 	copy value 	yes 	1 	0x20000000;
	(nop)	jnop 	0 	do nothing 	no 	1 	0x31000001;
	(|=)	or 	PS 	bitwise OR 	yes 	1 	0x22000000;
	(|)	ors 	PS 	non-storing bitwise OR 	yes 	1 	0x2A000000;
	(pop)	pop 	P 	pop from stack 	yes 	2 	0x3D000000;
	(push)	push 	S 	push to stack 	yes 	2 	0x3C000000;
	(recv)	recv 	PS 	check for raw data 	yes 	1 	0x3B000000;
	(ret)	ret 	0 	return from subroutine 	no 	2 	0x3F000000;
	(<<<)	rol 	PS 	rotate left 	yes 	1 	0x32000000;
	(>>>)	ror 	PS 	rotate right 	yes 	1 	0x33000000;
	(-R=)	sbb 	PS 	subtract with borrow 	yes 	1 	0x27000000;
	(-R)	sbbs 	PS 	compare with borrow 	yes 	1 	0x2F000000;
	(send)	send 	PS 	send raw data 	no 	1 	0x3A000000;
	(<<=)	shl 	PS 	shift left 	yes 	1 	0x34000000;
	(<<R=)	scl 	PS 	chained shift left 	yes 	1 	0x36000000;
	(>>=)	shr 	PS 	shift right 	yes 	1 	0x35000000;
	(>>R=)	scr 	PS 	chained shift right 	yes 	1 	0x37000000;
	(-=)	sub 	PS 	subtract 	yes 	1 	0x26000000;
	(-)	subs 	PS 	compare 	yes 	1 	0x2E000000;
	(swm)	swm 	S 	set write mask 	yes 	1 	0x28000000;
	(&)	test 	PS 	non-storing bitwise AND 	yes 	1 	0x29000000;
	(wait)	wait 	P 	check for attention request 	yes 	1 	0x39000000;
	(^=)	xor 	PS 	bitwise XOR 	yes 	1 	0x23000000;
	(^)	xors 	PS 	non-storing bitwise XOR 	yes 	1 	0x2B000000;
}[0]:>(opcodes){
	let i = -1, opcode;
	let jumpHandler{
		:chooseJumpType;
		r temp1 = r valueBlueBits;
		r temp1 &= 0xf;
		r temp1 -= 1 !store;
		jump -> [jumpHashTable+r temp1] if == 0;//allow for "nop;"
		print("jump"...colours.jumpType,const0,1);
		r temp1 |= 0;
		jump -> [jumpHashTable+r temp1] if == 0;//allow for "jmp x"
		print(" ",const0,1);//for "jmp >= x"
		jump -> [jumpHashTable+r temp1];//jumpHashTable: {@}*[]
		let number = 0x31000000, name = "jump";
	};
	jumpHandler;
	let dwHandler{
		print("jmp"...colours.number,const0,1);
		printHexFixed(valueRedBits,temp1,const0,4);
		printHexFixed(valueBlueBits,temp1,const0,4);
		print(colours.default,const0,1);
		jump -> opandTypeHandler..return;
	};
	def dwHandler;
	#set opcodeHashTable[0x11] = {@jumpHandler};
	let opcodeClassMap = {let .("0")=0,.("P")=1,.("S")=2,.("PS")=3};
	repeat opcodes..length:def:{
		:opcode;//:Opcode & {@}
		let opcode_rawString = opcodes[i+=1];
		let opcode.tptasmName = opcode_rawString[3];
		let opcode.zasmName = #(statement){
			let i = -1;
			repeat statement..length ...codeof statement[i+=1];
			delete i
		}(opcode_rawString[1][0]);// || opcode.tptasmName;
		let opcode.type = opcodeClassMap.(""...opcode_rawString[4]);//"P", "S", "PS", "0"
		let opcode.number = opcode_rawString[-2]..asNumber;
		...codeof Opcode(opcode.zasmName,opcode.type);//:{@} ; {print ()}
		let isJump = opcode.tptasmName[0] == "j";
		repeat !!+isJump:{
			repeat (opcode.number & 0xf == 1):{//nop or readHigh
				#opcode..splice(0,0,{
					let doNop;
					r temp1 = r valueRedBits;//TODO get this working
					r temp1 &= 0x1fff;
					r temp1 ^= 0x1110 !store;
					jump -> doNop if !=0;
					r temp1 = r valueBlueBits;
					r temp1 &= 0xf00f;
					r temp1 ^= 0x0001 !store;
					jump -> doNop if !=0;
					{:readHighHandler;
						print("readHigh ",const0,1);
						r opcodeClass = opcodeClassMap.("PS");//not needed
						r valueBlueBits >>= 4;
						call opandTypeHandler.opandTypeHashTable.argHandlers.R1;//shift 0
						print(""...colours.default..." "...colours.bracket..."[",const0,1);
						call opandTypeHandler.opandTypeHashTable.argHandlers.R2;//shift 4
						print(""...colours.bracket..."]"...colours.default,const0,1);
						r valueBlueBits <<= 4;
						r valueBlueBits |= 0x0001;
						jump -> opandTypeHandler..return;
					};
					def doNop;
				});
			};
			#set jumpHashTable[opcode.number&0xf] = {@opcode};
		};
		repeat !+isJump:
			#set opcodeHashTable[opcode.number / 0x01000000 & 0x1f] = {@opcode};
	};
	let i = -1;
	repeat 16 repeat !jumpHashTable[i+=1] throw "missing jump command in hashmap: "...+i;
	let i = -1;
	repeat 32 repeat !opcodeHashTable[i+=1] throw "missing opcode in hashmap: "...+i;//#set opcodeHashTable[i] = {@dwHandler};
}():>var()[0];
//assert: [%address] == (%valueRedBits<<16)|%valueBlueBits;
let main{
	{:getWholeRawValue;
		//assume: %address is assigned
		r valueBlueBits = [r address];
		readHigh(valueRedBits,address);
	};
	{:getOpcode;
		let temp<->regs.temp1;
		r temp = r valueRedBits;
		r temp >>= #(24-16);
		[data.oper] = r temp;
		print(""...colours.command,const0,1);
		jump -> [opcodeHashTable + r temp];//:jump -> Opcode
	};
	def opandTypeHandler;
	print(colours.default,const0,1);
};
let dissassemble{
	let input = address;
	let output = data;
	let regsUsed = #(¬regs..labels)..length;
	def main;
	jump -> ..return;
	def var;
};
{:test;
	import lib "var_const.0xmin";
	repeat 1 {
		print("\p00\c0fa quine using a\n",const0,1);
		print("dissasembler.\n",const0,1);
		print("compiled with:\n");
		print("\c03Z\c0cA\c0aS\c0bM\c0f\n",const0,1);
		print("assembled with:\n",const0,1);
		print("\c0ctptasm\c0f\n",const0,1);
		print("\c0f----------------\c0f",const0,1);
		repeat 0 repeat 60 null;
	};
	let dissassemble = {
		...labelsof dissassemble;
		def dissassemble;
		return;
	}:>var()[0];
	def let printCode{
		let call(start,length){};//unused
		def let startOfProgram;
		let i <-> dissassemble.regsUsed;
		let i1 <-> dissassemble.regsUsed + 1;
		%i = startOfProgram;
		%i1 = "\p70";
		def let loop;
		{
			%dissassemble.input = 0;//var({jump 100 if >= 0;});//
			%dissassemble.input += %i;
			call dissassemble;
		};
		%i += 1;
		def let loopOver{
			%i1 += 0x10;
			%i1 -= "\pc0" !store;
			jump->..return if < 0;
			%i1 = "\p00";
			print("\p00",const0,1);
		};
		send %const0 %i1;
		print({repeat 16 " "},const0,1);
		send %const0 %i1;
		let lengthOfProgram = var..return;
		%i -= lengthOfProgram !store;
		jump -> loop if <= 0;
	};
	hlt;
	def var,const;
};
//delete;
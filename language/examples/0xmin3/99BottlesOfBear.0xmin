#"0xmin";#"len";//#"table";
import lib "var_const.0xmin";
let count = var("99");
move 1;
repeat 0 def let innit{//@ count = "99";
	let startCount=const({"9"}[0]);//int[2]
	move=>startCount;get;
	move=>count;set;move 1;set;
};
let sub1(count){
	let list=var({
		#let i=-1;
		"9";
		repeat 9:def: Â¬(""...+(i=i+1));//[0-8]
	});
	move=>count+1;get;
	def let subDigit{
		move=>const(0x2000000f);and;
		move=>const(0x02000000);or;
		move=>const({0 1}..compile[0]);red;
		//assume: {move}..compile[0] == 0;
		//assert: alu:move +count;
		let command;
		move=>command;set;
		move=>const({0 -0}..compile[0]);
		or;
		move=>list;
		set jump+3;
		null#def command;//move->list[count];
		get;//alu=list[count];
		null;//move<-list[count];
	};
	null#def let subDigit.returnTo;//:command jump->next instruction
	move=>count+1;set;
	{:if;
		let then,else;
		move=>const({"9"}[0]);
		if 1;xor;
		if;//if !(count[1]=="9"); -> handle carry
		jump->if..return #def then;
		#def else;//else: handle carry
		let returnTo;
		move=>var({
			$jump=>subDigit..return..state.jump;
			$move=>subDigit..return..state.move;
			jump->returnTo;
			$jump=>0;
		});
		get;
		move=>subDigit.returnTo;set;
		move=>count;get;
		move=>subDigit..state.move;
		jump->subDigit;
		$move=>subDigit..return..state.move;
		#def returnTo;
		move=>count;set;
		move=>const({null}..compile[0]);get;
		move=>subDigit.returnTo;set;
		move=>then..state.move;
	};
};
let printCount(preString){
	move=>count;
	get;
	set jump +3;
	move 1;
	get;
	null;
	set jump +3;
	repeat 3 null;
};
def let loop;
let plurals={};
printCount();
" bottle";"s"#def let plurals[0]={};" of beer on the wall. ";
printCount();
" bottle";"s"#def let plurals[1]={};" of beer.";
sub1(count);
" Take one down, pass it around, ";
printCount();
" bottle";"s"#def let plurals[2]={};" of beer on the wall. ";
let bridge;
def:{:block;
	jump->block..return;
	$move=>loop..state.move;
	jump->loop#def bridge;
	$move=>block..state.move;
	var;
	const;
	$move=>block..state.move;
};
let repeat(n,do){//(n:int,do:#(var(1<<lel))->{@})->{@}
	let i=var(0);
	move=>var(1<<n);get;move=>i;set;
	repeat (n>0) def:{:loop;
		do(i);
		move=>i;get;if 1;
		move=>const(2);blue;
		move=>i;set;
		if;jump->loop;
	};
};
let return,jumpTo;
let loopRound={
	repeat 0 {:block;
		jump->block..return;
		def let state;
		$move=>return..state.move;
		def jumpTo;
		set jump +3;
		jump->return;
		$move=>state..state.move;
	};
	move=>loop..state.move;
	jump->bridge;
};
repeat 0 {:checkForEnd;
	let breakIfEqual(index,value){
		move=>count +index;get;if 1;
		move=>const(value);xor;if;
		move=>checkForEnd..return..state.move;
		jump->checkForEnd..return;
	};
	def let onLastVerse{
		let null=const({null}..compile[0]);
		move=>null;get;
		let i=0;
		repeat plurals..length:{
			move=>plurals[i];set;
			#i=i+1;
		};
		move=>const({jump+1}..compile[0]);get;
		jump->loopRound+1;
		#def return;//move=>loopRound..return-1;set;
		"done\h";
	};
};
"\p00";
def repeat(4)<:{};
def repeat(16)<:{repeat 12 " ";};
"\p00";
def loopRound;
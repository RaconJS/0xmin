//15:25
#"0xmin";#"len";//#"table";
()->{
	let pos{//the 0x2000... is done that way to make converting it to a '\p' easier
		let x=var("\p00"|8);//:int in range[1,16]
		let y=var(0x2000000|8);//:int in range[1,12]
		let char=var("\p88");
	};
	let grid{repeat 12:0x1;}¬:>var();
	let snake{
		let len=var(1);
		let maxLen=const(12*16*0+30);
		let pos=pos;
		let direction=var(1);
		//tail side
		def let tail;
		@:#(""...pos.char[0]);
		!move->snake;
		repeat (maxLen[0]-2):"\p00";
		//head side
	};
	let wholeSnake={
		//0x3fffffff;//used to find the end of the snake.
		def let body=snake;
	};
	let apple="\p78":>var();
	let i=-1;
	//repeat 3:{def ¬(""...snake[i+=1]);"#"};
	@:#(""...pos.char[0]);
	"H";
	@:#(""...apple[0]);
	"A";
	let heap{
		def wholeSnake;
	};
	//the pain begins here. luckilly thanks to get/set jump, the move pointer should not need to leave the var/const area
	move 0xff;
	move=>var;
	let gameEnd{
		"\p00You loose\h";
	};
	def let mainLoop{
		let getInput=getInput(¬);
		getInput;
		let hitBorder{
			;
		};
		if;//if !!input
		{let then,else;
			jump->then;
			def else{
				jump->then..return;
			};
			def then{
				let setDir=#()={
					let i=0;
					#this::(asd){
						move=>const(+(i+=1));get;
						move=>snake.direction;set;
					};
				}();
				def switch()
					<:+"w"<:setDir
					<:+"a"<:setDir
					<:+"s"<:setDir
					<:+"d"<:setDir
				;
				move=>else..state.move;
			};
		};
		#let jumpGate1;
		{
			let callList(list,setUp){//`list[i]()` ; A type of branch function
				move=>const(0x10);
				red;
				move=>const(+{jump 0}..compile[0]);
				or;
				set jump+3;
				#setUp=setUp||{null;null;null};
				setUp;
				let i=-1;
				def let state;
				repeat list..length:{
					let foo=list[i+=1];
					#foo..splice(0,0,{$move=>state..state.move});
					jump->foo;
				};
			};
			let list;
			move=>snake.direction;get;
			callList()<:({}::{
				:self;
				#list=self;
				def:{:w;
					move=>snake.pos.y;get;
					decrement();
					move=>snake.pos.y;set;
					if 1;
					move=>const(0x10);
					and;
					move=>gameEnd..state.move;
					if;//if y<0
					jump->gameEnd;
					jump->..return;
				};
				def:{:a;
					move=>snake.pos.x;get;
					decrement();
					move=>snake.pos.x;set;
					if 1;
					move=>const(0x10);
					and;
					move=>gameEnd..state.move;
					if;//if y<0
					jump->gameEnd;
					jump->..return;
				};
				def:{:s;
					move=>snake.pos.y;get;
					increment();
					move=>snake.pos.y;set;
					if 1;
					move=>const(12|0x2000000);
					xor;
					move=>gameEnd..state.move;
					if;//if y!=12
					jump->..return;
					jump->gameEnd;
				};
				def:{:d;
					move=>snake.pos.x;get;
					increment();
					move=>snake.pos.x;set;
					if 1;
					move=>const(0x10);
					xor;
					move=>gameEnd..state.move;
					if;//if x!=16
					jump->..return;
					jump->gameEnd;
				};
			});
			def list{
				$move=>gameEnd..state.move;
			};
			delete list;
			{:getPosChar;
				move=>pos.y;get;
				move=>const(0x10);red;
				move=>pos.x;or;
				move=>pos.char;set;
			};
			def let UpdateScreen{
				{
					//move=>pos.char;get;
					set jump+3;
					jump+2;
					null;
					"\p00";//move curser to head
					"#";
				};
				{
					move=>snake.tail;get;
					set jump+3;
					jump+2;
					null;
					"\p00";//move curser to tail
					" ";
					{:removeFromGrid;
						let jumpVar()={
							let: get;
							set jump+3;
							jump->this..return;
							$move=>0xmin;
							if 0#def let if0;
							null;
							get jump-1;
							jump->get..return;
							$move=>this..state.move;
							#get{
								$move=>0xmin;
								def let clearFlag{if;null};
								!jump->this.if0;
								$move=>..state.move;
							};
						};
						def let tailVar=jumpVar();
						move=>const(0x10000);or;
						move=>const(0x100f0);and;//alu = move grid=>grid[tail.y] 
						move=>const(0x1000);
						let do;//BUG FOUND HERE
						set jump+3;
						or;//alu = move grid<=grid[tail.y]
						set jump+3;
						null;$move=>0xmin;
						jump->do;
						$move=>grid;null#def let do.return;
						jump->do..return;
						def do{
							$move=>0xmin;//$assert:move=>grid[tail.y]
							{
								def tailVar.get;null;
							};
							$move=>grid;
							jump->do.return;
						};
					};
				};
			};
			def jumpGate1{
				jump->..return;
				$move=>mainLoop..state.move;
				jump->mainLoop;
				$move=>..state.move;
			};
			let shuffleSnakeParts,growSnake,setHead,getNextApplePos;
			def:{:ifTouchingApple;
				:if;
				let then,else;//if apple == pos.char;then;else;
				#then=growSnake;
				#else=shuffleSnakeParts;
				move=>apple;get;if;
				move=>pos.char;
				xor;move=>snake.len;if;
				jump->else;
				def then;//growSnake
				def getNextApplePos;
				move=>else..return..state.move;
				jump->else..return;
				$move=>snake.len;
				def else;//shuffleSnakeParts
			};
			#setHead{
				let returner;
				{:block;
					move=>snake.pos.char;get;
					set jump+3;
					jump->block..return;
						#def let returner.preState;$move=>0xmin;
						if 0#def let returner.start;
						null#def let pos_char;
						get jump-1;
						set;
						!jump->returner;
					$move=>returner.preState..state.move;
				};
				{
					move=>snake.len;get;
					move=>const(0x10);red;
					move=>const(0x1000);
					set jump+3;
						or;
						move=>snake-1;
					null;$move=>0xmin;
					set jump+3;
						if 1;
						!jump->returner.start;#def returner;
					null;$move=>snake-1;//22 frames
					null;
				};
			};
			#shuffleSnakeParts{
				//assert: move=>snake.len
				$move=>snake.len;
				{:ifLenGreaterThan1;
					get;if 1;
					move=>const(2);blue;
					move=>setHead..state.move;
					if;
					jump+2;
					jump->setHead;
				};
				move=>snake+1;
				$move=>0xmin;//assert move=>snake.head
				def:{:loop;
					get;move-1;set;
					if 1;if 0;0x20000000;
					get jump -1;
					nor;move->move-1;
					if;//if not past tail
					jump->loop;
					set jump+3;
					null;
					null;
					null;$move=>snake;
				};
				def setHead;
			};
			#growSnake{
				virtual{//assert: move=>snake.len
					!move=>snake.len;
					jump -1;//ERROR
				};
				get;
				repeat 0 {:spaghetti1_setHead;
					move=>const(0x10);red;
					move=>const(0x1000);
					let next,setReturner,setReturner.state;
					#def let next.state;
					set jump+3;
					or;//assert alu == {move<=head}
					jump->next;
					{:spaghetti2;
						let moveFromHead,moveToHead;
						$move=>snake+0;
						null#def moveToHead;
						$move=>0xmin;
						set;
						jump->moveFromHead;
						$move=>setReturner.state..state.move;
						set jump+3#def setReturner;
						move=>snake+0;
						jump->moveToHead;$move=>0xmin;
						null#def moveFromHead;
						$move=>snake+0;
						jump->next..return;
					};
					def next{
						$move=>next.state..state.move;
						move=>pos.char;get;
						#def setReturner.state;
						jump->setReturner;
					};
					$move=>snake+0;
				};//19
				move=>snake.len;get;
				increment();
				move=>snake.len;set;
				move=>setHead..state.move;
				jump->setHead;
			};
			#getNextApplePos{
				move=>apple;get;
				set jump+3;
				null;null;null;" ";
				{:generateNewPos;
					move=>const("\p85");get;
					move=>apple;set;
				};
				set jump+3;
				null;null;null;"A";
			};
		};
		move=>mainLoop..state.move;
		jump->jumpGate1+1;
	};
	def gameEnd;
	def data;
	def heap;
};
...(){
	import lib "var_const.0xmin";
	let Tempory()={//:()=>(#()=>{@}){}
		#this(vars)={
			#set constructor::{
				ram=>..this;
				def vars();
			};
		};
	};
	let tempory=Tempory():>var()[0];
	let array_set(array,value,do)={
		//array:@{},,value:label&@int, do:{@}
		//$assert: alu = index
		repeat !do:#do={set};
		set jump+3;
		jump->do..return;
		def do;
		move=>const(moveShift);red;//$assert: alu:move command
		move=>const(moveBack);
		set jump +3;
		or;
		move=>array;
		if;if;null;get jump-1;//assert: move=>array[index], alu = move<=array[index]
		set jump+3;
		jump->do;
		null;
		null;
		$move=>array;
	}::{
		#let ..prototype{
			let moveShift={move 1}..compile[0];
			let moveBack={move-0}..compile[0]
		};
	};
	let increment(){
		let sub2=const(-2&0x2fffffff);
		tempory()<:()->{
			#def let notIn<=>¬0,notOut<=>¬0;
		};
		#let const_2=const(2);
		move=>notIn;
		set;
		nor;
		set;//notIn= ~input
		blue;
		move=>const_2;
		blue;
		red;
		move=>notOut;
		set;
		nor;
		move=>notIn;
		red;
	};
	let decrement(){//assume: alu!=-1
		let sub2=const(-2&0x2fffffff);
		tempory()<:()->{
			0#def let val;
			0#def let mask;
		};
		move=>val;
		set;
		move=>sub2;
		get;
		move=>val;
		red;
		move=>mask;
		set;
		nor;
		move=>val;
		xor;
		//10
		//-x = ~x+1
		//~x = -x-1
		//x+1
	};
	let data{
		jump->..return;
		def var,const;
	};
	let Function()={
		let call(foo){
			jump->foo;
			!jump<-foo..return;
		};
	};
	let getInput(shouldWait){
		//shouldWait:label?
		:this;
		move=>const(0x20000000);get;
		move=>const("\a");
		def let checkBuffer{
			or input;if 1;xor;xor;
			repeat !shouldWait:move=>this..return..state.move;
			{if;//if(no input) then loop or return;
				repeat !shouldWait:jump->this..return;
				repeat !!shouldWait:jump->..this;
			};
		};
		"\a";
		repeat 12:or input;
		move=>const(~"\a"|0x20000000));and;
		//if flag is true if there was an input
	};
	let switch(){
		:this;
		let cases{...codeof arguments};//:{...{case:int;code:#(switch,i){@}}[]};
		let cases.case=0,cases.code=1;
		let i=0;
		let lastCase=0,case;
		if;null;
		repeat (cases..length/2):{//rounded down
			:case;
			let returner={
				move=>this..return..state.move;
				jump->this..return;
				let noTampering;
			};
			let code=cases[i*2+cases.code](case,+i,this);//v,i,a
			#case = cases[i*2+cases.case];
			move=>const(lastCase^(lastCase=case));
			xor;
			repeat !code.noMoveState:move=>returner..return..state.move;
			if;//if value!=case
			jump->returner..return;
			def code;
			#i+=1;
			def returner;
		};
		repeat (i>0 &&!!this[-1].returner.noTampering)#this[-1].returner<=>{};//removes the last jump->..return
	};
};
def .[0]();
//keywords
	void;
	static;//static is not used yet
	virtual;
	recur;
	repeat;
	import;
	delete;
	import lib;
	import this;
	import main;
	...let;
	...set;
	...def;
	#let;
	#set;
	#def;
	$undef;
	$def;
	$set;
	$jump;
	$move;
	$ram;
	$alu;//unused
	@move;
	@jump;
	@set;
	@if;
	@nor;
	@red;
	@blue;
	@and;
	@or;
	@xor;
//words that can't be used for variables

	//[there are none]
//symbols
	@ $ #
	+ - * / ** % ^ & ~ ¬
	! ^^ || &&
	= <=> <->//operator
	-> <- => <=//assembly operator
	=> = -> <- //function types
	... //concat
	( ) [ ] { } //brackets
	"" '' ``; //strings
//function delcarations
`note: can also do`#(){}`to avoid confusion with`foo = (){}` => `(foo=())#{}` or `foo = #(){}` => `foo = #((){})``
	(){}
	#(){}
	()={}//class
	#()={}//etc... can put '#' infront of a shortExpression to separate it from others
	()=>{}//arrow function
	()<={}//reverse arrow function
//function extensions for existing variables
	foo (){}
	foo ()={}
	foo ()=>{}
	foo ()<={}
//function calls
	foo()
	foo(a,b,c,{...d},e,f)//can pass in objects/functions as arguments as well
	foo(a,b) ::c ::{...d} ::e ::f //same function call, just with some external arguments
	foo(bar(baz)); or 
//object declarations
	{}
	#{}
//object extensions
	obj{}
//@ / $ expressions
//number can be any of: +123,-123,*123,/123
	label;
	label +123;
	label label;
	label -> +123;
	label -> label;
	label label -> +123;
	label label -> label;
//line structure
//formal
@ $ # void virtual static://start of line
	recur: 2 //allows for this line to be run 2 times
		@ $ #//choses phase to start at.
		repeat: 3
			repeat: 4//3 * 4 = 12 iterations
				://assembly,hidden,meta phases: have to be done in that order; starts with the phase chosen previously
					jump label1 => label2//assembly phase; '=>' sets value, '->' just evaluates it.
					$undef set def://hidden/secret phase;
						label from => to
					#let set def://meta phase; '#def x;' == '$undef def set x;'
						label=foo({})+4
;
//note: ':'s,'@$#'s are optional but are recomended as a best practice.
//Phases symbols can be infered, prioritising the '@' phase over '#' where possible.
//It is highly recommended to use phase symbols for consistancy.
// ':' can be used to allow keywords to be seen as variable names
//e.g.
	#let: let=2;//makes a variable called 'let';
//instead of
	#let let;//which does nothing; 

//change the default phase
	@; $; #;
{//e.g.
	#;//void #;
	let a;//#let: a;
	a=2;//#def set: a = 2;
	@;//void @;
	a;//@a;
}//the default phase affects the nearest scope (weak scope).

{//basics
	//0xmin compatibillity version 3
	//aka 0xmin V3;
	0xmin 3;
	//aka ZASM
	ZASM;
	//aka 0xmin Assembly Small Macro language
	//aka 0@$#;
	0@$#;
	//0xmin is a C-like language. i.e. '//' == comment, {} == block of code
	//is more similar to javascript in terms of flexibility
	//zasm uses
	{};//everything even block scopes MUST end with a ';'.
	{1;2}//The only exeption is at the last line of code
};
0xmin;{//machine code
	//can write numbers
	0x123;
	123;
	0b1001;
	//can instead use number arguments for assembly code.
	//0xmin uses the form:
	//instuction(4bit) relativeAddress(8bit) sign(1bit)
	//e.g.
	//jump -5;//note: singed numbers are not yet supported can use 'jump -> label instead'
	//can be writen as a list of assembly parts:
	//in order: 
	@command address isNegative;
	1 5 1;//=>'jump -5;'=>[jump,5,-]
	1 5 0;//=>'jump +5;'=>[jump,5,+]
	//special charactors
	//char's
	"\p00";//set curser posision
	"\h";//hault. compiles to 'jump 0;'
	"\a";//accept input from terminal
	"\x00";//ASCII charactor
	"\u0000";//unicode charactor
	//char's compile to: 'print char'
	//strings
	"hello world";
	//compiles to
	"h";"e";"l";"l";"o";" ";"w";"o";"r";"l";"d";
};
@;{//assembly code
	{//basics:
		//commands;
		//pointer commands
			move;jump;
		//misc commands
			set;if;
	
		//alu commands
			get;nor;red;blue;and;or;xor;
		
		//e.g.
		jump 4 0;
		//compiles to:
		1 4 0;
		//compiles to:
		0x0041;
	};
	//can also use 'a to b' aka 'a -> b' syntax
	{
		#let labelName;//created a variable/label called 'labelName' in the 'meta' ('#') phase;
		$def labelName->0xmin 5;//then in the memory assignment ('$') phase it sets labelName's memory address to 5;
		//labels can be 
		jump->labelName;//jumps to labelName
		move=>labelName;//moves to labelName
		//'=>' is just like '->' execept at has changes the assosiated pointer compile time
		//so repeating using '->' :
			move->labelName; //move #(+labelName);
			move->labelName; //move #(+labelName);
		//would compile to the same result each time
		//but repeating  using '=>' :
			move=>labelName; //move #(+labelName);
			move=>labelName; //move 0;
		//
	};
};
$;{
	$undef:label;
	$set:label; 
	$def:array;
};
#;{
	#let set def;//are executed in that order
	#let: label;/*creates a label. Can add this to the block scope e.g.*/ let label=0; /* or to the parent object e.g.*/ let object.label=2;
	//if a label exists it will replace it. labels can not be created through expressions like in javascript*/
	/*e.g.*/#set: object.newProperty=2;/*will not do anything*/  
		

	intended use:
	#let: a;
	#set: a=2;
	#def a;
	#set: 1 + 2 * 4;//evaluates an expression operators are done in order exept for the assignment operators: '=', '<=>' and '<->'
	#def: label;/*inserts label into the scope's code array;*/

	/*note: at the moment:*/ #def: /*is syntactic sugar for:*/ $set label;$def label;//in that order
	expressions;(
		//value types:
		1,//number
		"string",
		label,//label,
		,//array: not used
	);
};
starter line:{
	void;{
		does not add this line of code to the parent scope_object;
		usefull for mutating arrays without leaving a trace;
		note: it is pointless to use '$' and '@' type code on void lines as they cannot be found in the assembly/hidden phases.
		//lets say we want an #array with 4 items and a property pointing to the last one
		e.g. 1
		let array5{
			1;
			2;
			3;
			let item4=0;//this line is included in the array
			4 #def item 4;
		};//array5..length=5
		e.g. 2
		let array4{
			1;
			2;
			3;
			void let item4=0;//this line is NOT included in the array
			4 #def item 4;
		};//array4..length=4
	};
	static;{
		not supported yet; might allow running code in function scopes.
	};
	repeat;{
		repeat expression
	}
};
import;{
	//import opens a file and runs it in the current scope
	//use form
	import lib "libraryFile.0xmin";//imports a standard library. aka the include folder
	import this "subFile.0xmin";//imports relative to the current file
	import main "projectFile.0xmin";//import relative to the first file.
	import "file.0xmin";//default setting: 'import "";' ==> 'import this "";' 
};
...;{
	...//injects parts of a label into the current scope's label (scope.label)
	...let: {let a,b,c;};...let object;//properties (namespace)
	...set: {1;2;3;};...set array;//code (array)
	...def: (){1;2;3};...def function;//runs code in scope
	//these can be combined;
	... let set def: label;
};
delete;{
	removes properties from an object.
	delete;//delete all labels in block scope
	delete label;//deletes label from 
	intended use:{
		#let bar;
		#def bar;
		move=>bar;
		delete bar;
		//ensures that 'bar' cannot be used beyond this point
	}
};
virtual;{
	allows for running code in different places
	used for struct pointers;
	e.g.:{
		let SomeStructure(){
			def let char2;
			"ab";
			def let intA;
			1;
			def let intB;
			4;
		};
		def let someCode{//some code with the same structure as 
			"a";"b";
			1;2;
		}
		let pointer=SomeStructure=();
		virtual def pointer;
		//We want 'pointer' and it's properties to have the same cpuStates as 'someCode'
		//without using 'virtual' we could use ..compile() and 
	};
};
//design notes:
//function code is imutable
//cpuState checking
{//e.g.
	$move=>0xmin;
	jump -> 2;//throws a cpuState error as move is not the same on lines 2 and 4
	move +2; //move => move+2;
	null;
}
//can use '@: !command;' to ignore state checking
//'!command;' can be used for variables/constants e.g. can be used in function calls
!jump -> 2;
{//example of use
	$jump=> a;
	$jump->b;//state check a->b
	$jump=> 0;
	!jump a->b;
};
{//e.g.
	$move=>0xmin;
	!jump -> 2;//ignores state checking and compiles as normal
	move +2; //move => move+2;
	null;
};
$set foo->bar;//'->', aka the `to` operator, returns 'bar - foo'.
$set move=>label;//'=>', aka the `set to` operator, is similar to '->' exept it sets the memory location of  foo to bar, at ($) compile time
move 2;/*is the same as:*/move=>move 2;
move=>move 2;/*is the same as:*/move->move 2;$set move=>move 2;
move->move 2;//does not change
{//un implemented future potential features
	static;{
		let foo(){
			static ..this.bar=2;
		};
		foo.bar;
	};
	types;{
		':' operator;
		'foo : bar' operator would enforce the restriction 'bar' onto 'foo';
		where: foo is any Value and bar is a function or just a value;
		syntacticly: foo is a long expression and bar is a expression that matches up to a '¬' or '='
		1+1:2+2 ¬# = 2; compiles to: (((1+1) : (2+2)) ¬) = 2;
		e.g.
		let label:condisions=2;//spl
		can make "type" objects
		e.g.
		let Int(){
			???//not sure how this would work yet
		};
		let foo:Int = 2;
		let bar:Int = "a";//throws error
	};
	pipeLine;{
		':>' operator
		let foo(a,b,c){
			;
		};
		let a,b,c;
		a:>b:>foo(c);
	}
	new,var,const;{
		new, var, const would be an inbuilt version of the Data object;
		{
			#let: Data()={
				#let: varList{};
				#let: constList{};
				#let: var(data){
					#set: varList{
						$def: data;
					};
				};
				#let: const(data){
					#set: constList{
						$def: data;
					};
				};
				#let: new{//:data*
					void #let: var(condision){#;
						#let: item;
						#let: isDone=0;
						repeat: (varList..length&&isDone) {
							find a block of memory that meets the condision;
						};
						return = item;
					};
					void #let: const(data){#;
						insert new.var code but with varlist
					};
				};
			}
		};
		the original documentation mentioned these 3;
		new is a type of $set;
		'var': marks a piece of code or assembly line as variable #(not constant);
		'const': marks a piece of code or assembly line as constant;
		'var' and 'const' add code onto a JS array of free code;
		'new': assigns memory locations;
		new searches through the avalable variableList or constantList and assigns the found memory location
		examples;{
			{
				@const nor;
				@const move=>10;
				@var null;
				let new var: a;
				@move=>10#const;
			};
		};
	}
}
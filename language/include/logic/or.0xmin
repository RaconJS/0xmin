//UNFINISHED
#let or(x,y,out){};{
	#set or(x,y,out){
		if(x){
			if(x!=alu){move->x;get;}
			move->block.x;set;
		}
		if(y){
			if(y!=alu){move->y;get;}
			move->block.y;set;
		}
		#let ret;
		#let returner{jump block.return->ret;};
		//assume alu = input2;
		move->returner;get;move->block.return;set;
		//$assert move->endBlock;
		jump->block.start;
		$move->block.return.move;
		def returner;
		#def ret;
		if(out){
			move->out;set;
		}
	};
	def let block{
		#var x,y,start;
		#let zeroFilt,temp;
		#let return.move;
		$move->return;
		#def block.start;
		move->x;get;if;
		move->y;nor;
		if;#let then;
			jump->then;
			;
			move->zeroFilt;get;
			$move->y;
		#def then;
		#delete then;
		move->temp;set;nor;
		#return.move->temp;
		null #def return;
		null #def x;
		null #def y;
		null #def temp;
		0x20000000 #def zeroFilt;
		#delete notX,notY;
	}
}
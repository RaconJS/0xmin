//pls correct me if i
let riskete{
	#void{
		let _cmd;
		{
			let do(rA,rB,rC_number,command){
				#void{
					#let isRegister=0,rC=0,number=0;
					if(rC_number.isRegister){
						#set isRegister=1;
						#set rC=+rC_number;
					}else{
						#set number=+rC_number;
					}
				}
				(
					0x20000000//1bit
					|((+command)      <<24)//5bits
					|((+rA&0xf)       <<20)//4bits
					|((+rB&0xf)       <<16)//4bits
					|((+isRegister)   <<15)//1bits
					|((+rC&0xf)       << 0)//4bits
					|((+number&0x7fff)<< 0)//15bits
				);
			}
			let risketeCommand(command)={
				#let ret(rA,rB,rC_number){//return
					def do(rA,rB,rC_number,command);
				};
			}
			#set _cmd=risketeCommand;
		}
	}
	//1*tagBit,5*instruction,4*registerA,4*registerB,1*opandMode:[isNumber,isRegister],15*number|(,4*registorC;)
	//0xiiabxxxx;
	#{//commands
		let NOP , nop  = NOP  = _cmd(0x00).ret;//null
		let JUMP, jump = JUMP = _cmd(0x01).ret;//jump
		let CNPC, cnpc = CNPC = _cmd(0x02).ret;//read jump;
		let JALN, jaln = JALN = _cmd(0x03).ret;//jump-> read jump;

		let BEQ , beq  = BEQ  = _cmd(0x04).ret;//jump-> if ==
		let BNE , bne  = BNE  = _cmd(0x05).ret;//jump-> if !=
		let BGT , bgt  = BGT  = _cmd(0x06).ret;//jump-> if >=
		let BLE , ble  = BLE  = _cmd(0x07).ret;//jump-> if <=

		let READ, read = READ = _cmd(0x08).ret;//get
		let WRIT, writ = WRIT = _cmd(0x09).ret;//set
		let DBUG, dbug = DBUG = _cmd(0x0A).ret;//
		let HLT , hlt  = HLT  = _cmd(0x0B).ret;//hault

		let SEND, send = SEND = _cmd(0x0C).ret;//output
		let BUMP, bump = BUMP = _cmd(0x0D).ret;//bump
		let RECV, recv = RECV = _cmd(0x0E).ret;//get current_input
		let CHEK, chek = CHEK = _cmd(0x0F).ret;//get input (from buffer)
		//----
		//----
		let NOT , not  = NOT  = _cmd(0x10).ret;//not
		let AND , and  = AND  = _cmd(0x11).ret;//and
		let OR  , or   = OR   = _cmd(0x12).ret;//or
		let XOR , xor  = XOR  = _cmd(0x13).ret;//xor

		let SEQ , seq  = SEQ  = _cmd(0x14).ret;//get ==
		let SNE , sne  = SNE  = _cmd(0x15).ret;//get !=
		let SGT , sgt  = SGT  = _cmd(0x16).ret;//get >=
		let SLE , sle  = SLE  = _cmd(0x17).ret;//get <=

		let ADD , add  = ADD  = _cmd(0x18).ret;//add
		let SUB , sub  = SUB  = _cmd(0x19).ret;//sub
		let SHL , shl  = SHL  = _cmd(0x1A).ret;// <<< "leftShift"
		let SHR , shr  = SHR  = _cmd(0x1B).ret;// >>> "rightShift"

		let LSBL, lsbl = LSBL = _cmd(0x1C).ret;//blue       aka "variable left shift" aka "least significant bits left"
		let LSBR, lsbr = LSBR = _cmd(0x1D).ret;//red        aka "variable right shift" aka "least significant bits left"
		let SLB , slb  = SLB  = _cmd(0x1E).ret;//red_bits   aka "lowest registerB bits"
		let SHB , shb  = SHB  = _cmd(0x1F).ret;//blue_bits  aka "highest registerB bits"
	}
	#void #delete risketeCommand;
	#void{//create 16 registers
		#let i=0;
		let(){
			#let r=i;
			#let r.isRegister=1;
			#let riskete["r"...i]=r;
			#set i=i+1;
		}::{
			repeat 16 this();
		}
		#delete undefined;
		#delete i;
	}
}
...var riskete;
delete riskete;

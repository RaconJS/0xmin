#"tptasm";
#:#(){:documentation;
	print{
		type Const_0 = %@0 | mut %
		type bool = #{}|#() & #?
		//all print functions mutate the terminal
		#(string)-bool>{@}; //same function as print.string
		string:#(#string,%Const_0?,#bool?)->{@};
		char:#(%char,%Const_0?,#bool?)->{@};
		number:{
			#(%int)->{@}; //same function as print.number.register
			register:#(%int,%Const_0?,%?,(%|¬)?)->{@};
			static:#([@],%Const_0?,%?,(%|¬)?)->{@};
			hexChar:#(%int,%Const_0?,(%|¬)?) -> {@};
			charSet:{@}&{
				setup:#()->{@}?
			};
		};
	};
};
//type #bool = #{}|#()
let print(str,const_0,is0){//:#(#string|{@},%?,{}?)->{@}
	//this function mutates const_0 if it is provided as an argument.
		//Similar is true for other functions in this module
	let reinsertRegs;
	repeat !const_0:{
		#const_0 = 1;
		push r const_0;
		#reinsertRegs::{
			pop r const_0;
		};
	};
	repeat !is0: r const_0 = 0;
	let i = -1;
	repeat str..length{
		send r const_0 str.(i += 1);
	};
	def reinsertRegs;
}::{
	let string = ..this;
	let string.char(reg,const_0,is0){
		let reinsertRegs;
		repeat !const_0:{
			#const_0 = 1;
			push r const_0;
			#reinsertRegs::{
				pop r const_0;
			};
		};
		repeat !is0: r const_0 = 0;
		let i = -1;
		send r const_0 r reg;
		def reinsertRegs;
	};
	let saveReg(reg,default,regsToPush,regsToPop){#;
		repeat !reg:{
			#reg = default;
			#regsToPush..splice(-0,0,{push r reg});
			#regsToPop..splice(0,0,{pop r reg});
		};
		#return = reg;
	};
	let number{
		let charSet = "0123456789ABCDEF";
		let charSet.setup(){
			repeat (charSet..defs..length==0):{
				:block;
				jump -> block..return;
				def charSet;
			};
		};
		let static(memoryAddressInput,reg_memoryData,reg_const_0,reg_char,reg_i){//#(@,%?,%?,%?,%?)->{@}
			let hadRegInput = !!reg_memoryData;
			repeat !+hadRegInput {
				{:findUniqueRegister;
					let i = 0;
					let regArgs = {+reg_const_0;+reg_char;+reg_i};
					repeat 14 {#;
						repeat (!!¬regArgs..indexOf(+i)):
						#i += 1;
					};
					#reg_memoryData = 4;
				};
				push r reg_memoryData;
			};
			r reg_memoryData = [memoryAddressInput];
			register(reg_memoryData,reg_const_0,reg_char,reg_i);
			repeat !+hadRegInput {
				pop r reg_memoryData;
			};
		};
		let register_short(regInput,reg_const_0,reg_char,reg_i){

		};
		let register(regInput,reg_const_0,reg_char,reg_i){//#(%,%?,%?,%?)->{@}
			//if reg_i is provided then runs a loop at run time.
			//reg_i: ()|%|{}<->()
			#let temp = regInput;
			def let regsToPush;
			let regsToPop;
			#reg_const_0 = saveReg(reg_const_0,regInput+1 %14,regsToPush,regsToPop);
			#reg_char = saveReg(reg_char,0xmin.Math.max(reg_const_0,regInput) +1 %14,regsToPush,regsToPop);
			repeat !reg_const_0.is0: r reg_const_0 = 0;
			repeat (reg_i!=()):let useForLoop;//if reg_i argument provided
			repeat !!useForLoop:{
				#reg_i = saveReg(reg_i,0xmin.Math.max(reg_const_0,regInput,reg_char) +1 %14,regsToPush,regsToPop);
				r reg_i = #(4 - 1);
			};
			def let loop;
			repeat {4;1}[+!!useForLoop] {
				r reg_char = 0;
				r temp <<<= 4;//circular shift
				r reg_char <<= 4 + internal;
				send r reg_const_0 [charSet + r reg_char];
			};
			repeat !!useForLoop:{
				r reg_i -= 1;
				jump -> loop if >= 0;
			};
			def regsToPop;
			charSet.setup();
		};
		let hexChar(regInt,const_0,reg_char){
			def let regsToPush;
			let regsToPop;
			#const_0=saveReg(const_0,(regInt+1)%14,regsToPush,regsToPop);
			#reg_char=saveReg(reg_char,(regInt+2)%14,regsToPush,regsToPop);
			repeat !const_0.is0: r const_0 = 0;
			r reg_char = 0;
			r regInt | 0;//circular shift
			r reg_char >>= 4 + internal;
			r reg_char >>= 12;
			send r const_0 [charSet + r reg_char];
			def regsToPop;
			charSet.setup();
		};
		$def register;
	};
	let register = number.register;
};
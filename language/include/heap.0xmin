//heap
void #set:(){//documentation
	heap{
		#type int{i29};
		#type Function{
			@(...%[])->%[] & {@};    //non-macro(#) function(->) that takes in a list(...) of register names(%) that store memory addresses([]) and outputs it to a single output register(%) that stores a memory location([]).
			call:#(...%[])->@{};     //property 'call' is a macro function that takes in no arguments
			inputs:#{...%[]};//array of registers
		};
		#type Page{
			next:@Page*;
			last:@Page*;
			isUsed:@bool;
			data:@any[];//+page == +page.data
		};
		regsUsed:#int & %;
		malloc:Function(%int length)->%Page*;
		free:Function(%Page*)->void;
		clear:Function(%Page*,%Page*?,%Page*?)->void;
		memset:Function(%Page*,%int16,%int13)->void;
		resize:Function(%Page*,%int16)->%int16;
		realloc:Function(%Page*,%int16,%(@()->%bool)*,%int16)->%bool|%Page;
		ref:#(%Page*)->{@};
		unref:#(%Page*,{@}?,!!label?)->{@};
		memory{
			@Page;//start page
			#list of intended actions{
				#def: this;
				$undef: this;
				$def set: this;
			};
		};
	};
};
void #set: 0xmin.settings.language("tptasm");
void #let set: heap{
	#let: free,malloc,clear,memset,resize,realloc;//@functions
	#let: regsUsed = 3;//:int & %
	#let: ref,unref;//#()->{@}
	#let: memory;
	//each of the functions has a '.call(...args)' method
	#let: Call;
	#let set: memoryData(){
		#def: malloc;
		#def: free;
		#def:{
			#def: clear;
			#def: memset;
		};
		#def set: memory{
			0x1fffffff;
			#def: page0;
		};
	};
	#;
	#set: Call(foo,inputRegs){//call functionName,args
		#let: repeatNum = foo.nextReg.n + (foo.inputs..length-inputRegs..length);
		#let: i=0;
		repeat (foo.nextReg.n):{
			@push %i;
			#set: i=i+1;
		};
		{//set inputs
			#let: i=0;
			repeat inputRegs..length:{//assume {def a}[0] == {$def a;$set a}
				repeat #(+inputRegs[+i]!=+foo.inputs[+i])
					@ %(foo.inputs[+i])=%(inputRegs[+i]);
				#set: i=i+1;
			};
		};
		call foo;
		repeat (foo.nextReg.n):{
			#set: i=i-1;
			repeat (+i>=foo.outputs..length):@pop %i;
			repeat (+i<foo.outputs..length):@sp+=1;
		};
		#let: startI=0;
		//UNFINNISHED
	}::{
		#let: addCaller(foo,len){
			//repeat (len==1)
			#let: heap_Call=Call;
			#let: foo.call(){
				...let set: heap_Call(foo,arguments);
			};
		};
	};
	#let: Page()={
		#def let: next{0};//:@* //pointer
		#def let: last{0};//:@* //pointer
		#def let: isUsed{0};
		#def let: data;//:@[] //array
	}::{
		#let: prototype=..this();
		#let: size=prototype..compile..length;
		#let: pointer()={
			...set let prototype;
		};
	};
	//note: Page=().isUsed can used as an int to count refernces for smart pointers.
	#let: page0=Page();//:@
	#set: page0{//start of the heap
		#set: next..splice(0,1,{0x7fff});
		#set: last..splice(0,1,{(page0);});
	};
	#let: enum(start,inputsLen)={
		repeat !inputsLen #set: inputsLen=1;
		#let: newObj={};
		#set: newObj(){
			#set: return =+newObj.n;
			repeat #(newObj.n>=inputsLen):{
				#set: newObj.push{push newObj.n;};
				#set: newObj.pop..splice(0,0,{pop newObj.n;});
			};
			#set: newObj.n=newObj.n+1;
		}::{
			#let: n=start;
			#let: push{};
			#let: pop{};
		};
		#set: return = newObj;
	};
	//
	//%:weak,@:let,$:break,#:this
	#set: malloc{
		#let: nextReg=enum(0);
		#let: inputs{//:#
			#def let: words=nextReg();//:%
		};
		#let: data{
			(page0) #def let: startPage;//:Page*
		};
		#let: outputs{//:#
			#def let: pointer=0;//:%
		};
		...let inputs;
		...let data;
		...let outputs;
		#let: page=nextReg();//:%Page*
		#set: page..splice(0,-0);
		#set: page{...let set Page();};
		#let: compiledPage=#(page..compile);
		#let: pageSize=nextReg();//:%int; size of the current page
		#let: remainder=pageSize;
		#let: spaceNeeded=words;
		#let: extraSpace=compiledPage..length;//:int; miminum page size
		%spaceNeeded += extraSpace;
		delete words;
		%page=[startPage];//Page* = [Page**]
		//%page=[%page];//Page = [Page*]
		#let: whenFound;
		#def let: loop{
			#let: failed;
			{//isUsed==0?
				#let: isUsed=pageSize;//:%Page*
				%isUsed=[%page+page.isUsed];
				jump failed if !=0;
			};
			//assert: %page = next unused page
			{//hasEnoughSpace?
				%pageSize=[%page+page.next];
				%pageSize-=%page;
				%remainder-=%spaceNeeded;
				jump failed if<0;
			};
			jump whenFound;
			#def: failed{
				%page=[%page+page.next];
				jump->loop;
			};
		};
		#def: whenFound{
			[startPage]=%page;//moves [startPage] to increase malloc's efficiency
			[%page+page.isUsed]=1;
			%remainder-=extraSpace;
			jump ..return if<=0;//if no space => dont need to rewire page pointers
			//%remainder+=extraSpace;
			delete remainder;
			//find location for nextPage
			#let: newPage<->pageSize;//:%Page*
			delete pageSize;
			%newPage=%page;
			%newPage+=%spaceNeeded;
			#let: nextPage<->spaceNeeded;
			delete spaceNeeded;
			%nextPage=[%page+page.next];
			{//setUp page pointers;
				//a<-->c
				//a<->b<->c
				//a=r2,b=r4,c=r5
				#let: a=page,b=newPage,c=nextPage;
				[%b+page.isUsed]=0;
				[%b+page.next]=%c;//b->c
				def:{:block;
					%c-=0x7fff;//if %c == end of heap then don't mutate
					jump->block..return if<=0;//handles end of heap
					[%c+page.last]=%b;//b<-c
				};
				[%b+page.last]=%a;//a<-b aka: b.<- = a
				[%a+page.next]=%b;//a->b aka: a.-> = b
			};
			//setOutput
		};
		%pointer=%page;
		%pointer+=compiledPage..length;
		return;
		#def: data;
	}::{void #set: Call.addCaller(..this,1);};
	#set: free{
		#let: nextReg=enum(0);//get next free register
		#let: inputs{//:#
			#def let: pointer=nextReg();//:%Page*
		};
		#let: data{};
		#let: outputs{};
		#let: page=inputs.pointer;//:%Page*
		#set: page..splice(0,-0);
		#set: page{...let set Page();};
		#let: compiledPage=#(page..compile);
		%page-=compiledPage..length;
		#let otherPage=nextReg();//:%Page* contains next/last page
		#let: isUsed=nextReg();//:%bool
		#let: joinIfFree(toOtherPage,toThis){//:#(page property,page property)=> @(%Page*,%Page*)=>void
			//extends low_address_page into high_address_page
			#let: end;
			%otherPage = [%page+toOtherPage];
			%isUsed=[%otherPage+page.isUsed];
			jump->end if!=0;
			//if free then join
			//:delete isUsed
			#let: newAddress=isUsed;//:%Page*
			%newAddress = [%otherPage+toOtherPage];
			[%page+toOtherPage]=%newAddress;//assert: page.toOtherPage=otherPage.toOtherPage
			%newAddress = [%page+toThis];
			[%otherPage+toThis]=%newAddress;//assert: otherPage.toThis=page.toThis
			#def: end;
		};
		#def: joinIfFree(page.next,page.last);
		#def: joinIfFree(page.last,page.next);
		[%page+page.isUsed]=0;
		def:{:moveStartingPage;
			let startPage=isUsed;//:[%]
			///[startPage]=%page if %page<[startPage];
			%startPage=[malloc.data.startPage];
			%startPage-=%page;
			jump->moveStartingPage..return if<=0;
			//assert:%startPage>%page
			[malloc.data.startPage]=%page;
		};
		return;
		#def: data;
	}::{void #set: Call.addCaller(..this,1);};
	#set: sizeOf(pageInput){
		#let: lengthOutput=pageInput;
		//%pageInput=%lengthOutput;
		%lengthOutput-=[%page-(Page.prototype..length-Page.prototype.next)];
	};
	#set: clear{//aka fill memory
		#let: nextReg=enum(0);
		#let: self=..this;
		#let: inputs{
			#def let: page=nextReg();//input, page data
		};
		...let inputs;
		delete self;
		#let: data{
			#def let: redHalf{0};
			#def let: blueHalf{0};
		};
		#let offset;
		$offset=>Page.prototype.data;
		#let: address=nextReg();
		%address=%page;
		%page-=offset;
		mask = [data.redHalf];
		#let: fillData=nextReg();
		%fillData=[data.blueHalf];
		#def let: for{
			#let: i=nextReg();
			%i=[%page+Page.prototype.next];
			%i-=%address;
			#let: Loop(n)={
				let end;
				%i-=n;
				jump->end if<0;
				#def let: start;
				{
					let i=0;
					repeat n:{
						[%address+i]=%fillData;
						#i=i+1;
					};
				};
				%address+=n;
				%i-=n;
				jump->start if>0#def end;
				%i+=n;
			};
			#def: Loop(8);
			jump->..return if<=0;
			#def let: loop{
				[%address]=%fillData;
				%address+=1;
				%i-=1;
				jump->..this if>0;
			};
		};
		%page+=offset;
		return;
		#def: data;
	}::{void #set: Call.addCaller(..this,1);};
	#set: memset{
		#let: nextReg=enum(0);
		#let: inputs{
			#def let: page=nextReg();//input
			#def let: high=nextReg();
			#def let: low=nextReg();
		};
		...let inputs;
		[clear.data.redHalf]=%high;
		[clear.data.blueHalf]=%low;
		call clear;//clear.call(inputs.page);
		[clear.data.redHalf]=0;
		[clear.data.blueHalf]=0;
		return;
	}::{void #Call.addCaller(..this,3);};
	#set:resize{//similar to realloc except it doesn't change the pointer if there isn't any space
		#let: nextReg=enum(0);
		#let: inputs{
			#def let: page=Page()<->nextReg();//input
			#def let: size=nextReg();//size of new block
		};
		#let: outputs{
			#def let: newSize=0;//returns 0 if no page found
		};
		...let inputs;
		...let outputs;

		//UNFINISHED
	}::{void #Call.addCaller(..this,4);};
	#set:realloc{
		...labelsof{:setUpMeta;
			#(){:pseudocode_for_interface;
				//expands memory in both directions or finds new block
				#let realloc(object,size,offset){//:({},int,int)->{}
					repeat offset: 0;
					...set: object..splice(0xmin.Math.max(-offset, 0), size);
					:newObject;
					#let: sizeLeft <-> size - newObject..length;
					repeat sizeLeft: 0;
					delete: newObject,sizeLeft;
				};
			};
			#let: nextReg = enum(0);
			#let: inputs{
				#def let: page = Page.pointer=() <-> nextReg();//input
				#def let: size = nextReg();//size of new block
				#def let: onMovePage = nextReg();//function pointer to call if there is a reallocation
				#def let: offset = nextReg();//data offset. Is the new index for the current data, relative to the new page.
			};
			#let: outputs{
				#def let: newPage = 0;//returns 0 if no page found
			};
			#let: defaultInputValues{
				();();0;0;
			};
		};
		... labelsof{:setUpVariables
			...let: inputs;
			...let: outputs;
			let nextPage = Page.pointer=() <-> nextReg();//:%Page*
			let pageSize = nextReg();//:%int
			let maxIndexNeeded = nextReg();//:%int ; is the size - offset
			let relocate{
				${:ifBlock;
					%onMovePage |= 0;
					jump -> ifBlock..return if == 0;//handles %onMovePage == null
					call %onMovePage;//function '%onMovePage' should leave only 1 reference to '%page'
					let ..this.returner;
					jump -> returner if != 0;//bool
				};
				let nextReg = enum(0xmin.Math.max(free.nextReg.n,malloc.nextReg.n));
				let temp = nextReg();
				let tempRegs{//arnt mutated by malloc or free
					#def let oldPage = Page.pointer=() <-> nextReg();
					#def let offset = nextReg();
				};
				%tempRegs.offset = %offset;
				%tempRegs.oldPage = %page;
				%malloc.inputs.(0) = %size;
				call malloc;
				let newPage = malloc.outputs.(0);
				let page = ¬,size = ¬, onMovePage = ¬, offset = ¬;//sets variables to null
				//assume: %page == %malloc.outputs.(0)
				{:moveData;
					#let nextReg = enum(newPage + 1);
					...let: tempRegs;
					let startI_oldPage <-> nextReg();
					let startI_newPage <-> nextReg();
					%startI_oldPage = %oldPage;
					%startI_newPage = %newPage;
					let i = offset;
					%temp = %offset;
					#offset = temp;
					%i = #(-1&0xffff);
					${:ifBlock;
						let rightShiftData;
						%offset |= 0;
						jump -> rightShiftData if >= 0;
						#def let: leftShiftData{//assert: offset < 0
							%startI_oldPage -= %offset;
							%i -= %offset;
						};
						jump -> ifBlock..return;
						#def: rightShiftData{//assert: offset > 0
							%startI_newPage += %offset;
						};
					};
					delete offset;//assert: +i == +offset
					%i += [%oldPage - (Page.size-oldPage.next)];
					%i -= %oldPage;
					//assert: %i = sizeof oldPage
					let copyingOverHighBits;//:#const bool
					let readHigh(rOut,rAddress){
						@(0x11100001|(rOut&0xf<<8)|(rAddress&0xf<<4));
					};
					let loopN(numOfRepsPerCheck,hasFirstCheck,hasNoLengthCheck)={
						let reps = numOfRepsPerCheck;//:#int
						repeat !!hasFirstCheck %i -= #(reps - 1) !store;
						repeat !!hasFirstCheck jump -> ..return if < 0;
						repeat !!hasNoLengthCheck jump -> moveData..return if == 0;
						${:loop;
							repeat reps:{
								repeat !!copyingOverHighBits:{
									%startI_oldPage += %i;
									readHigh(temp,startI_oldPage);
									%startI_oldPage -= %i;
									mask = %temp;
								};
								%temp = [%startI_oldPage + %i];
								[%startI_newPage + %i] = %temp;
								%i -= 1;
							};
							jump -> loop if >= 0;
						};
						jump -> moveData..return if < 0;
						i += reps;
					};
					loopN(8,{},{});
					loopN(1,(),{});
					repeat !!copyingOverHighBits mask = 0;
					repeat (nextReg.n > tempRegs[0]) throw "heap source code error: using too many registers";
				};
				{:callingFree;
					%free.inputs.(0) = %tempRegs.oldPage;
					let tempRegs.newPage <-> tempRegs.oldPage;
					delete tempRegs.oldPage;
					%tempRegs.newPage = %newPage;
					call free;
				};
				%outputs.newPage = tempRegs.newPage;
				return #def returner;
			};
		}
		${:extendForward;
			//checks for max size
			{:getPageSize;
				%nextPage = [%page - #(Page.size - page.next)];
				%pageSize = %nextPage;
				%pageSize -= %page;
			};
			%maxIndexNeeded = %size;
			%maxIndexNeeded -= %offset;
			%pageSize -= %maxIndexNeeded !store;
			jump -> extendForward..return if >= 0;//return if page is already big enough i.e. if(%pageSize >= %size)
			repeat 0 jump -> shrinkPage if < 0;//UNFINISHED
			[%nextPage + nextPage.isUsed] |= 0 !store;
			jump -> relocate if != 0;
			{:whenFree;
				let doublePageSize <-> pageSize;//size of both pages combined
				%doublePageSize = [%nextPage + nextPage.next];
				%doublePageSize -= %page;
				%doublePageSize -= %maxIndexNeeded !store;
				jump -> relocate if < 0;//note: do not need to consider merging more pages since consecitive empty pages should be imposible
			};
			{:merge2Pages;
				let temp <-> pageSize;
				let newNextPage = Page.pointer=() <-> maxIndexNeeded;
				%newNextPage += %page;
				delete maxIndexNeeded;
				[%page - #(Page.size - page.next)] = %newNextPage;
				%nextPage = [%nextPage + nextPage.next];
				${:updateNextNextPage;
					:block;
					%nextPage += 1 !store;//assume: there are 0x8000 memory locations
					jump -> block..return if sign;//prevents mutating memory outside the end of the heap.
					[%nextPage + nextPage.last] = %page;
					[%nextPage + nextPage.last] -= Page.size;
				};
				{//construct newNext
					[%newNextPage + newNextPage.next] = %nextPage;
					[%newNextPage + newNextPage.last] = %page;
					[%newNextPage + newNextPage.isUsed] = 0;
				};
				repeat 0 jump -> extendForward..return;//not needed since it is the same as '@jump => ram 1';
			};
		};
		repeat 0: ${:extendBackward;//There is probably a way to DRY this part
			let lastPage = Page.pointer=() <-> nextPage;
			let minIndexNeeded = offset;
			//checks for max size
			{:getPageSize;
				%lastPage = [%page - #(Page.size - page.last)];
				%pageSize = %lastPage;
				%pageSize -= %page;
			};
			let resizeThisPage;
			%minIndexNeeded |= 0;
			jump -> resizeThisPage if < 0;
			%pageSize -= %minIndexNeeded !store;
			jump -> extendForward..return if >= 0;//return if page is already big enough i.e. if(%pageSize >= %size)
			[%lastPage + lastPage.isUsed] |= 0 !store;
			jump -> relocate if != 0;
			{:whenFree;
				let doublePageSize <-> pageSize;//size of both pages combined
				%doublePageSize = [%lastPage + lastPage.last];
				%doublePageSize -= %page;
				%doublePageSize -= %maxIndexNeeded !store;
				jump -> relocate if < 0;//note: do not need to consider merging more pages since consecitive empty pages should be imposible
			};
			def resizeThisPage{
				let temp <-> pageSize;
				let newLastPage = Page.pointer=() <-> maxIndexNeeded;
				%newLastPage += %page;
				delete maxIndexNeeded;
				[%page - #(Page.size - page.last)] = %newLastPage;
				%lastPage = [%lastPage + lastPage.last];
				${:updateNextNextPage;
					:block;
					%lastPage += 1 !store;//assume: there are 0x8000 memory locations
					jump -> block..return if sign;//prevents mutating memory outside the end of the heap.
					[%lastPage + lastPage.last] = %page;
					[%lastPage + lastPage.last] -= Page.size;
				};
				{//construct newNext
					[%newLastPage + newLastPage.next] = %page;
					[%newLastPage + newLastPage.last] = %lastPage;
					[%newLastPage + newLastPage.isUsed] = 0;
				};
				repeat 0 jump -> extendBackward..return;//not needed since it is the same as '@jump => ram 1';
			};
		};
		#nextReg.n <-> relocate.nextReg.n;
		return;
		def relocate;
		//UNFINISHED
	}::{void #Call.addCaller(..this,4);};
	//garbidge collection
		#set: ref(r_address){//#([%Page.data])->{@}
			//can be used when adding a reference
			[%r_address-#(Page.prototype.data-Page.prototype.isUsed)]+=1;
		};
		#set: unref(r_address,deconstruct,longVersion){//:#([%Page.data],{@}?,bool & label?)->{@}
			//can be used when removing a reference
			[%r_address-#(Page.prototype.data-Page.prototype.isUsed)]-=1;
			:block;
			jump->block..return if>0;
			delete block;
			def deconstruct||{};
			repeat 0:{//clear
				%clear.inputs.(0)=%r_address;
				push %r_address;
				%r_address=0xffff;
				[clear.data.redHalf]=%r_address;
				[clear.data.blueHalf]=%r_address;
				pop %r_address;
				call clear;
			};
			#let: nextReg=free.nextReg;
			repeat (+r_address!=+free.inputs[0]):%free.inputs.(0)=%r_address;
			repeat !!longVersion:free.call(r_address);
			repeat !longVersion:call free;
		};
	//----
	#def: memoryData();
};
...let set heap;
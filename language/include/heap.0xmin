//search words: BODGED, OBSILETE, TYPE NOTE, TODO, UNFINISHED
//heap
void #set:(){//documentation
	heap{//TYPE NOTE: using the newer '[]#' annotation as an array. e.g. {1;2}:[2]int
		#type int{i29};
		#type Function{
			@(...[]%)->[]% & {@};    //non-macro(#) function(->) that takes in a list(...) of register names(%) that store memory addresses([]) and outputs it to a single output register(%) that stores a memory location([]).
			call:#(...[]%)->@{};     //property 'call' is a macro function that takes in no arguments
			inputs:#{...[]%};//array of registers
			use:#()->Function mutate heap;//def's Function, by assigning it onto the heap
			regsUsed:int;
		};
		#type Page{
			next:@Page*;
			last:@Page*;
			isUsed:@bool;//isUsed!=0:used, isUsed>0:reference counter, isUsed==-1:static
			data:@[]any;
		};
		#type StaticPage{
			isUsed:-1;
			data:@[]any;
		}
		Page.size:#int;
		Page.size:int;
		//use '0' for null pointers
		#type Object:Page.data & heap[];
		Object{
			pointer:#()->Object* & heap[]* ; is the end of a Page
			static:#()->Object* & static[]* ; is the end of a StaticPage
		};
		regsUsed:#int & %;
		alloc:Function(%Object*?,length:%int,offset:%int);//not implemented yet

		malloc:Function(length:%int)->%Object*? & (%Object|#{%null*,flag(if sign,if overflow)});
		free:Function(%Object*)->void;
		
		resize:Function(%Object*,%int16)-> #{%int16,flag(if sign)};
		shift:Function(%Object*,%int16)-> #{%Object*,%int16,flag(if sign)};

		clear:Function(%Object*,fillWith:{@} & {int16,int13}? & []static)->void;
		memset:Function(%Object*,%int16,%int13)->void;
		
		realloc:Function(%Object*,%int16,onMovePage:%(@()->bool & flag(if==0))*,%int16)->%Object|onMovePage();
		ref:#(%Object*)->{@};
		unref:#(%Object*,{@}?,#(!!label)?)->{@};
		memory{
			@Page;//start page
			#list of intended actions{
				#def: this;
				$undef: this;
				$def set: this;
			};
		};
	};
};
void #set: 0xmin.settings.language("tptasm");
void #let set: heap{#;
	#let: free,malloc,clear,memset,resize,shift,checkObject,alloc;//@functions
	#let: Object,Object.pointer,Object.static;//data types
	#let: ref,unref;//:#()->{@}
	#let version<->2;
	#version(checkVersion){#;
		//checks whether the checkVersion of the heap is compatible with this version
		let isCompatible = {1;2}..indexOf(checkVersion);
	};
	#let: regsUsed = 5;//:int & %
	#let: memory;
	#let: data{
		#def let: usedFunctions;
		#def: memory;
	};
	//each of the functions has a '.call(...args)' method
	#let: Call;
	#set: Call(foo,inputRegs){//call functionName,args
		#let: repeatNum = foo.nextReg.n + (foo.inputs..length-inputRegs..length);
		#let: i=0;
		let inputRegs <=> inputRegs;//make a copy to prevent mutations
		let stack = {};
		repeat (foo.nextReg.n):{//TODO: don't push the input inputRegs
			repeat 0 {
				//UNFINISHED system
				let includesReg = inputRegs..indexOf(+i);
				let inputReg = inputRegs[i];
				repeat !!includesReg: {
					@push %includesReg;
					#inputRegs[includesReg]=¬;
				};
				repeat !!includesReg: {
					@push %includesReg;
					#inputRegs[includesReg]=¬;
				};
				repeat !includesReg: @push %i;
			};
			@push %i;
			#set: i=i+1;
		};
		{//set inputs
			#let: i=0;
			repeat foo.inputs..length:{//assume {def a}[0] == {$def a;$set a}
				repeat !!inputRegs[+i]
				repeat #(+inputRegs[+i] != +foo.inputs[+i])
					@ %(foo.inputs[+i]) = %(inputRegs[+i]);
				repeat (!inputRegs[+i] && !!foo.inputs[+i].default)
					@ %(foo.inputs[+i]) = #(foo.inputs[+i].default);
				#set: i=i+1;
			};
			repeat !inputRegs[i];
		};
		call foo.use();
		repeat (foo.nextReg.n):{
			#set: i=i-1;
			repeat (+i>=foo.outputs..length):@pop %i;
			repeat (+i==(foo.outputs..length-1)):@sp+=foo.outputs..length;
		};
		#let: startI=0;
		//UNFINISHED
	}::{
		#let: addCaller(foo,len){
			//repeat (len==1)
			#let: heap_Call=Call;
			#let: foo.call(){
				...let set: heap_Call(foo,arguments);
			};
		};
	};
	#let intoHeapFunction;
	{
		#set intoHeapFunction(foo,argumentsLength){
			#let: foo.use(){
				#data.usedFunctions::{repeat(foo..defs..length==0):#def:foo};
				#return=foo;
			};
			#set: Call.addCaller(foo,argumentsLength);
			let foo.regsUsed <-> foo.nextReg.n;
		};
	};
	#let: Page()={
		#def let: next{0};//:@* //pointer
		#def let: last{0};//:@* //pointer
		#def let: isUsed{0};
		#def let: data;//:[]@ //array
	}::{
		#let: prototype=..this();
		#let: size=prototype..compile..length;
		#let: pointer()={
			...set let prototype;
		};
	};
	#set: Object(staticData)={
		...let set Page();
		repeat !!staticData:#{//BODGED OBSILETE ; for static memory blocks
			#data::{staticData};
			#isUsed <=> ¬-1;
		};
		$set this;
	}::{
		#let: prototype=..this();
		#let: size={
			ram => #(- Page.size);
			$def prototype;
		}..compile..length;
		#set: pointer()={
			...set let prototype;
		};
		#set: static(staticData)={
			#def let: isUsed{@(-1&0xffff)};
			#def let: data{repeat !!staticData staticData};
		}::{
			#let: prototype=..this();
			#let: size={
				ram => #(-prototype..@..length);
				$def prototype;
			}..compile..length;
			#set: pointer()={
				...set let prototype;
			};
		};
	};
	//note: Page=().isUsed can used as an int to count refernces for smart pointers.
	#let: page0=Page();//:@
	#memory{
		0x1fffffff;//this line is not needed, it just makes finding the start of the heap easier to find when debugging
		#def: page0;
	};
	#set: page0{//start of the heap
		#set: next..splice(0,1,{0xffff});
		#set: last..splice(0,1,{(page0);});
	};
	...let{//extra functions
		#let: enum(start,inputsLen)={
			repeat !inputsLen #set: inputsLen=1;
			#let: newObj={};
			#set: newObj(){
				#set: return =+newObj.n;
				repeat #(newObj.n>=inputsLen):{
					#set: newObj.push{push newObj.n;};
					#set: newObj.pop..splice(0,0,{pop newObj.n;});
				};
				#set: newObj.n=newObj.n+1;
			}::{
				#let: n=start;
				#let: push{};
				#let: pop{};
			};
			#set: return = newObj;
		};
		#let: isPageEndOfHeap(page){//:(%Page*)->flag(if>=0 !signed)
			%page - sp;//0xffff // note: stack has priority over the heap
		};
		#let: skipIfEndOfHeap(nextPage,do){
			//prevents mutating the end of the heap
			:block;
			isPageEndOfHeap(nextPage);
			jump -> block..return if>=0 !signed;
			def do;
		};
	};
	//
	//%:weak,@:let,$:break,#:this
	#set: malloc{
		#let: nextReg=enum(0);
		#let: inputs{//:#
			#def let: words=nextReg();//:%int
		};
		#let: data{
			(page0) #def let: startPage;//:@Page*
		};
		#let: outputs{//:#
			#def let: pointer=Object.pointer=()<->0;//:%Object*
		};
		...let inputs;
		...let data;
		...let outputs;
		#let: page=Page.pointer=()<->nextReg();//:%Page*
		#let: pageSize=nextReg();//:%int; size of the current page
		#let: remainder=pageSize;
		#let: spaceNeeded=words;
		#let: extraSpace=Page.size;//:int; miminum page size
		%spaceNeeded += extraSpace;
		delete words;
		%page=[startPage];//Page* = [Page**]
		//%page=[%page];//Page = [Page*]
		#let: whenFound;
		#def let: loop{
			#let: failed;
			{//isUsed==0?
				:ifBlock;
				[%page+page.isUsed]|0;//%isUsed=[%page+page.isUsed];
				jump failed if!=0;
			};
			//assert: %page = next unused page
			{//hasEnoughSpace?
				%pageSize=[%page+page.next];
				%pageSize-=%page;
				%remainder-=%spaceNeeded;
				jump whenFound if>=0 !signed;
			};
			#def: failed{
				%page=[%page+page.next];
				isPageEndOfHeap(page);
				jump->loop if<0 !signed;
				{:outOfHeapMemory;
					//out of heap memory
					%pointer = 0;
					%pointer - 1;//sets the sign and overflow flags for an error
					return;
				};
			};
		};
		#def: whenFound{
			[%page+page.isUsed]=1;
			%remainder-=extraSpace;
			jump ..return if<=0 !signed;//if no space => dont need to rewire page pointers.
			delete remainder;
			//find location for nextPage
			#let: newPage<->pageSize;//:%Page*
			delete pageSize;
			%newPage=%page;
			%newPage+=%spaceNeeded;
			#let: nextPage<->spaceNeeded;
			delete spaceNeeded;
			%nextPage=[%page+page.next];
			[startPage]=%newPage;//moves [startPage] to increase malloc's efficiency
			{//setUp page pointers;
				//a<-->c
				//a<->b<->c
				//a=r2,b=r4,c=r5
				#let: a=page,b=newPage,c=nextPage;
				[%b+page.isUsed]=0;
				[%b+page.next]=%c;//b->c
				skipIfEndOfHeap(c)<:{
					[%c+page.last]=%b;//b<-c
				};
				[%b+page.last]=%a;//a<-b aka: b.<- = a
				[%a+page.next]=%b;//a->b aka: a.-> = b
			};
			//setOutput
		};
		%pointer=%page;
		%pointer+=Page.size;
		return;
		"ZASM";
		#def: data;
	}::{void #set: intoHeapFunction(..this,1);};
	#set: free{
		#let: nextReg=enum(0);//get next free register
		#let: inputs{//:#
			#def let: pointer=Object.pointer=()<->nextReg();//:%Object*
		};
		#let: data{};
		#let: outputs{};
		#let: page=Page.pointer=()<->inputs.pointer;//:%Page*
		%page-=Page.size;
		{:handleStatic;//prevent attempting to free static objects
			[%page+page.isUsed]+1;
			jump->handleStatic..return if!=0;
			return;//throws flag(overflow) if static
		};
		[%page+page.isUsed]=0;
		#let: newLastPage=Page.pointer=()<->nextReg();
		#let: newNextPage=Page.pointer=()<->nextReg();
		{:joinNeighboursIfFree;
			{:block;
				:extendForward;
				%newNextPage=[%page+page.next];
				[%newNextPage+page.isUsed]|0;
				jump->block..return if!=0;
				%newNextPage=[%page+page.next];
			};
			{:block;
				:extendBackward;
				%newLastPage=[%page+page.last];
				[%newLastPage+page.isUsed]|0;
				jump->block..return if==0;
				%newLastPage=%page;
			};
		};
		{:reconnectPages;
			skipIfEndOfHeap(newNextPage)<:{
				[%newLastPage+newLastPage.next]=%newNextPage;
			};
			[%newNextPage+newNextPage.last]=%newLastPage;
		};
		{:moveStartingPage;
			let startPage=otherPage;//:[%]
			///[startPage]=%page if %page<[startPage];
			[malloc.data.startPage]-%newLastPage;
			jump->moveStartingPage..return if<=0 !signed;
			//assert:%startPage>%page
			[malloc.data.startPage]=%newLastPage;
		};
		return;
		#def: data;
	}::{void #set: intoHeapFunction(..this,1);};
	#set: sizeOf(pageInput){
		#let: lengthOutput=pageInput;
		//%pageInput=%lengthOutput;
		%lengthOutput-=[%page-(Page.prototype..length-Page.prototype.next)];
	};
	#set: clear{//aka fill memory
		#let: nextReg=enum(0);
		#let: self=..this;
		#let: inputs{
			#def let: page=nextReg();//input, page data
		};
		...let inputs;
		delete self;
		#let: data{
			#def let: redHalf{0};
			#def let: blueHalf{0};
		};
		#let offset;
		$offset=>Page.prototype.data;
		#let: address=nextReg();
		%address=%page;
		%page-=offset;
		mask = [data.redHalf];
		#let: fillData=nextReg();
		%fillData=[data.blueHalf];
		#def let: for{
			#let: i=nextReg();
			%i=[%page+Page.prototype.next];
			%i-=%address;
			#let: Loop(n)={
				let end;
				%i-=n;
				jump->end if<0;
				#def let: start;
				{
					let i=0;
					repeat n:{
						[%address+i]=%fillData;
						#i=i+1;
					};
				};
				%address+=n;
				%i-=n;
				jump->start if>0#def end;
				%i+=n;
			};
			#def: Loop(8);
			jump->..return if<=0;
			#def let: loop{
				[%address]=%fillData;
				%address+=1;
				%i-=1;
				jump->..this if>0;
			};
		};
		%page+=offset;
		return;
		#def: data;
	}::{void #set: intoHeapFunction(..this,1);};
	#set: memset{
		#let: nextReg=enum(0);
		#let: inputs{
			#def let: page=nextReg();//input
			#def let: high=nextReg();
			#def let: low=nextReg();
		};
		...let inputs;
		[clear.data.redHalf]=%high;
		[clear.data.blueHalf]=%low;
		call clear;//clear.call(inputs.page);
		[clear.data.redHalf]=0;
		[clear.data.blueHalf]=0;
		return;
	}::{void #set: intoHeapFunction(..this,3);};
	#set:resize{//grows the end of an object or throws an error flag(sign)
		//returns fail by setting the signed flag to 1
		//This works for shrinking an object too
		#let: nextReg = enum(0);
		#let: inputs{
			#def let: object = Object.pointer=()<->nextReg();//:%Object* ; input
			#def let: size <-> nextReg();//:%int !signed; size of new block
		};
		#let: outputs{
			#def let: size <-> 0;//:%int !signed; returns the new size of the input Object
			//on fail sets flag(sign)
		};
		//...let inputs;
		//...let outputs;
		let nextPage = Page.pointer=()<->nextReg();//:%Page*
		let newPage = Page.pointer=()<->inputs.size;
		{:handleStatic;
			let temp <-> nextPage;
			[%inputs.object-(-inputs.object.next)] + 1;
			jump -> handleStatic..return if != 0;
			%outputs.size = 0;//static pages do not have info about their size
			r0 | (-1 & 0xffff);
			return;
		};
		%newPage += %inputs.object;//assert: %newPage == %object + %size
		%nextPage = [%inputs.object-(-inputs.object.next)];
		let difference = nextReg();//:%int !signed
		{:checkIfNotUsed;
			:ifBlock;
			let fail;
			isPageEndOfHeap(nextPage);
			jump -> fail if>=0 !signed;//cannot extend past the end of the heap
			[%nextPage+nextPage.isUsed] | 0;//if nextPage is free
			jump -> ifBlock..return if==0;
			def fail{:noSpaceToExpand;
				repeat !(+outputs.size == +inputs.object):{throw"assumption failed"};//assume
				let temp = difference, difference = ¬;
				%temp = %inputs.object;
				%outputs.size = %nextPage;
				%outputs.size -= %temp;
				r0 | (-1&0xffff);//set flag(if sign)
				return;
			};
		};
		//assert: [%nextPage] is free
		{
			let nextNextPage = Page.pointer=()<->nextReg();
			%nextNextPage = [%nextPage+nextPage.next];
			%inputs.object -= Page.size;
			let inputPage = Page.pointer=() <-> inputs.object;
			let mergePagesFully;
			{:update_page0;
				%nextPage - [malloc.startPage];
				jump->update_page0..return if >= 0 !signed;
				[malloc.startPage] = %inputPage;
			};
			{:checkForSpaceToInsertPage;
				%difference = %nextNextPage;
				%difference -= %newPage;//check for enough space for inputs.size
				jump -> mergePagesFully if<0 !signed;
				%difference - Page.size;//check for enough space to insert a new page
				jump -> mergePagesFully if<0 !signed;
			};
			let returnNewSize;
			{:insertNewPage;
				//assert: the object does not overlap with the nextNextPage
				[%inputPage+inputPage.next] = %newPage;
				skipIfEndOfHeap(nextNextPage)<:{
					[%nextNextPage+nextNextPage.last] = %newPage;
				};
				[%newPage+newPage.next] = %nextNextPage;
				[%newPage+newPage.last] = %inputPage;
				[%newPage+newPage.isUsed] = 0;
				//assert: success
				//assert: sign flag == 0
				{:getNewSize;//should return the size requested
					repeat !(+newPage != +outputs.size):{throw "assumption failed"};//assume
					repeat !(+inputPage == +outputs.size):{throw "assumption failed"};//assume
					let newSize = newPage;
					%newSize -= %inputPage;
					let newPage = ¬;
					%outputs.size = %newSize;
					%outputs.size -= Page.size;
				};
				return;
			};
			def mergePagesFully{
				[%inputPage+inputPage.next] = %nextNextPage;
				skipIfEndOfHeap(inputPage)<:{
					[%nextNextPage+nextNextPage.last] = %inputPage;
				};
				//assert: %difference==0 || (%difference!=0 && fail && %newPage > %nextNextPage)
				def let getSize{
					let temp = nextNextPage;
					%nextNextPage -= %inputPage;
					delete nextNextPage;
					%temp -= Page.size;
					%outputs.size = %temp;
				};
				{:ifBlock;
					let fail;
					%difference|0;
					jump->fail if != 0;
					return;
					def fail{
						r0|0xffff;
						return;
					};
				};
			};
			//assert: function has returned
		};
	}::{void #set: intoHeapFunction(..this,2);};
	#set:shift{
		//TODO: check this function
		//same as resize but can extend or retract the back of an object.
		//This function is useful for `object.unshift(1,2,3)` or `object.shift()` operations
		//returns fail by setting the signed flag to 1
		#let: nextReg=enum(0);
		#let: inputs{
			#def let: object=Object.pointer=()<->nextReg();//:%Object* ; input
			#def let: size=nextReg();//:%int !signed; size of new block
		};
		#let: outputs{
			#def let: object=Object.pointer=()<->0;
			#def let: size=1;//:%int ; returns the new size of the input Object
		};
		let lastPage = Page.pointer=()<->nextReg();//:%Page*
		let lastObject = Object.pointer=()<->lastPage;//:%Object* & (%lastPage as %Object*)
		%lastPage = [%inputs.object-(-inputs.object.last)];
		{:checkIsFree;//checks lastPage is free;
			:ifBlock;
			[%lastPage+lastPage.isUsed]|0;
			if==0 jump->ifBlock..return;
			{:fail;
				//assume: newPage is free
				//assume: %inputs.object == the original input object
				%outputs.size = [%inputs.object-(-inputs.object.next)];
				%outputs.size -= %inputs.object;
				r0 | (-1 & 0xffff);
				return;
			};
		};
		let newPage = Page.pointer=()<->inputs.size;//:%Page* replaces inputs.size
		%newPage ^= 0xffff;//$assert: %newPage == -(%size+1)
		%newPage -= (-(+1-Page.size));//$assert: %newPage == -%size - Page.size
		%newPage += [%inputs.object-(-inputs.object.next)];//$assert: %newPage == %object.next - %size
		let mergePages,resizePages;
		{:checkForSpace;
			:ifBlock;
			%lastPage += Page.size;
			#delete lastPage;//replaced with lastObject
			%newPage - %lastObject;
			if>0 jump->ifBlock..return;//case 'if==0' is excluded to prevent free pages with size==0.
			{:onFailUseLastPage;
				let nextPage = Page.pointer=()<->lastObject;
				%nextPage = [%inputs.object+inputs.object.next];
				[%lastObject-(-lastObject.next)] = %nextPage;
				let outputObject = lastObject;
				%outputs.object = %lastObject;
				//assume: +nextPage > 2
				%outputs.size = %nextPage;
				%outputs.size -= %outputs.object;
				return;
			};
		};
		def resizePages{//inserts a new page
			%lastObject += Page.size;
			let lastPage = lastObject;
			delete lastObject;
			[%lastPage+inputPage.next] = %newPage;
			[%lastPage+inputPage.last] = %page;
			[%newPage+newPage.next] = %page;
			[%newPage+newPage.last] = %lastPage;
			[%newPage+newPage.isUsed] = 0;
		};
		return;
		//let lastLastPage = [];
	}::{void #set: intoHeapFunction(..this,2);};
	#set:alloc{
		#let nextReg = enum();
		#let: inputs{
			#def let: page = Object.pointer=() <-> nextReg();//:%Object* ; input
			#def let: size = nextReg();//:%int !signed; size of new block
			#def let: offset = nextReg()::{let default = 0};//:%int signed; data offset. Is the new index for the current data, relative to the new page.
			#def let: onMovePage = nextReg()::{let default = 0};//:%{@}*?|%0 ; function pointer to call if there is a reallocation
		};
		#let: outputs{
			#def let: newPage = 0;//:%Object* ; returns 0 if no page found
		};
		//UNFINISHED
	}::{void #set: intoHeapFunction(..this,4);};
	#set:checkObject{//checks if an address is an object on the heap.
		let nextReg=enum(0);
		let inputs{
			def let object=Object.pointer=()<->nextReg();
		};
		let outputs{
			def let object=inputs.object;
		};
		let startPage=malloc.data.startPage;
		let currentPage=Page.pointer=()<->nextReg();
		let targetPage=Page.pointer=()<->inputs.object;
		{%targetPage-=Page.size;
			%currentPage=page0;
			let startLoop;
			jump->startLoop;
			#def:{:forLoop;
				{//UNFINISHED
					[%currentPage+currentPage.next] - %currentPage;
					let fail;
					jump->fail..return if > 0;
					def fail{
						%targetPage+=Page.size;
						let temp = currentPage;
						%temp = 0;
						%temp - %targetPage;//assume %targetPage > 0 !signed
						return;
					};
				};
				%currentPage = [%currentPage+currentPage.next];
				#def startLoop;
				%targetPage-%currentPage;
				jump->forLoop if>0 !signed;//fail with flag(0)
			};
		%targetPage+=Page.size};//convet back into object
		%currentPage+=Page.size;
		%targetPage-%currentPage;
		//assert: success:flag(0) | fail:flag(<0!signed)
		return;
	}::{
		void #set: intoHeapFunction(..this,1);
		let useNumber = 0;
		let try_catch(object,then,else,finally){
			#object = object||0;
			#then = then||{
				import lib "R2/print.0xmin";
				print("\c19valid"...+useNumber);
				print.register(0);
				print("\c0f");
			};
			#else = else||{
				import lib "R2/print.0xmin";
				print("\c4cinvalid #"...+useNumber...":");
				print.register(0);
				print("\c0f");
				hlt;
			};
			#useNumber += 1;
			#finally = finally||{};
			push r0;
			push r1;
				call ..this.use();//#def:..this.call(object);
				jump->else if != 0;
				def then;
				jump->else..return;
				def else;
			pop r1;
			pop r0;
			def finally;
		};
		let test(object,expectInvalid,message){//:#(%(heap[]?)*,#?,#{string,string}?)->@()->Result<hlt|()> & pure
			//UNSTABLE
			repeat !object #object = 0;
			def ..this.call(object);
			let expectOnHeap = !!expectOnHeap && {} || ¬;
			repeat !!expectOnHeap:jump->return..return if == 0;
			repeat !expectOnHeap:jump->return..return if != 0;
			import lib "R2/print.0xmin";
			print("\p00\c4C"...(message[0]||"ERROR:"));
			print.register(object);
			print(message[1]||({{"is"};{"is not"}}[!!expectOnHeap]..."on heap\c0f"));
			hlt;
		};
	};
	//garbidge collection
		#set: ref(r_address){//#([%Page.data])->{@}
			//can be used when adding a reference
			[%r_address-#(-Object.prototype.isUsed)]+=1;
			{:handleStatic;
				jump->return..return if != 0;
				[%r_address-#(-Object.prototype.isUsed)]-=1;
			};
		};
		#set: unref(r_address,deconstruct,regsAreFree){//:#([%Object],{@}?,bool & label?)->{@}
			//can be used when removing a reference
			:block;
			[%r_address-#(Page.prototype.data-Page.prototype.isUsed)]+1;//handle static objects ; where static Page:{-1:isUsed;{@}}
			jump->block..return if == 0;
			[%r_address-#(Page.prototype.data-Page.prototype.isUsed)]-=1;
			jump->block..return if>0;
			delete block;
			//TODO: improve knowing when deconstruct should be inlined or called
			repeat !!deconstruct..defs..length://if deconstruct is a static function
				#def let: deconstruct={call deconstruct};
			repeat (!deconstruct||!deconstruct..defs..length)://if deconstruct is a block
				#def let: deconstruct=deconstruct||{};
			repeat 0:{//clear
				%clear.inputs.(0)=%r_address;
				push %r_address;
				%r_address=0xffff;
				[clear.data.redHalf]=%r_address;
				[clear.data.blueHalf]=%r_address;
				pop %r_address;
				call clear;
			};
			#let: nextReg=free.nextReg;
			repeat (+r_address!=+free.inputs[0]):%free.inputs.(0)=%r_address;
			repeat !regsAreFree:free.call(free.inputs.(0));
			repeat !!regsAreFree:call free;
		};
	//----
	#def: data;
};
void #set:(){//examples
	{:general_manyForms;
		{
			...labelsof {import lib "heap.0xmin";};
			let heap{import lib "heap.0xmin";};
		};
		{
			heap.malloc;
			malloc;
		};
		{
			call malloc;
			call malloc.use();
			malloc.call();
		};
		{
			def heap;
			def heap.malloc;
			def heap.memory;
		};
	};
	{:example1;
		let doStuff{@;};
		...labelsof {import lib "heap.0xmin";};
		{
			# let sizeOfObject = 5;
			@ r0 = sizeOfObject;//:size of object
			@ call malloc;
			@ [r0 + 0] = "h";
			@ [r0 + 1] = "e";
			@ [r0 + 2] = "l";
			@ [r0 + 3] = "l";
			@ [r0 + 4] = "o";
			# ...doStuff;
			@ call free;
		};
		{
			# let object2 = 1;//:%(Object)*
			@ r malloc.inputs.(0) = 40;
			@ call heap.malloc;
			@ r object2 = heap.malloc.outputs.(0);
			# ...doStuff;
			@ r free.inputs.(0) = r object2;
			@ call free;
			@ hault;
		};
		#def malloc;
		#def free;
		//#def realloc;
		#def memory;
	};
	{:example2;
		//note: heap.anyHeapFunction.call() saves registers onto the stack to make it easier to use.
		let heap{import lib "heap.0xmin";};
		let object = 0;//:%
		let size = 1;//:%
		r size = 10;
		heap.malloc.call(size);
		r object = heap.malloc.outputs.(0);
		heap.free.call(size);
		hault;
		def heap;
	};
	{
		...labelsof {import lib "heap.0xmin";};
		let a = 0;
		let deconstructor = {
			...doStuff;
		};
		heap.ref(a);
		heap.unref(a,deconstructor,{});
		def deConstructor;
		def heap.memory;
	};
};
void #...let set heap;
#"text";#"code";
let forEach(list,do){
	let i = -1;
	repeat list..length do(list[i=i+1],i,list,return);
};
let toString(obj){
	let a = forEach(obj,asd(v,i){def¬(""...(¬",")[i==0]...+v)});
	repeat !!obj[¬vec]:def¬("["...a..("@")..."]");
	repeat !obj[¬vec]:def¬(""...+obj);
};
let vec()={
	...codeof arguments;
	let .[¬vec];
	let dot(b){
		let sum = return <-> 0;
		forEach(this)<:(v,i,r)=>{#sum<->sum+(v*b[i]||0);};
	};
	let cross(b){
		let ans = return <=> vec();
		forEach(this)<:(v,i)=>{
			#let ans[i] = this[i-1]*b[i+1¬%b..length];
		};
	};
	let mul(b){
		let ans = return <=> vec();
		repeat !!obj[¬vec]:def¬("["...a..("@")..."]");
		repeat !obj[¬vec]:def¬(""...+obj);
	};
	let toString(){
		$"["...forEach(this,(v){$""...+v})..."]";
	};
};
toString()<:
	vec(1,2,3).dot({1;2;3})
;
debugger ..labels;
debugger (|0.1);
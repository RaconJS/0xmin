#let call(block){
	#let return;
	jump->block;
	move->block;//move move->block;
	move<-block;//move block->move;
	#def return;
};
#let: Struct(){
	#let: int(val)={
		void #set: int.block{
			$def set: val;
		};
		#set: return = val;
	};
	#let: int.block{};
	#let: return = int;
};
#def let: adder{
	#let input={
		#let a,b;
	};
	$def move=>..this;
	#let int=Struct();
	jump->int.block..return;
	$def set int.block;
	#let a=int(0),b=int(0);
	#set input.a=a,input.b=b;
}{//main
	let halfAdder={
		let carry=int(0);
		move=>a;get;
		move=>carry;set;//carry=a;
		move=>b;get;
		move=>a;xor;set;//a=a^b;
		move=>carry;get;
		move=>b;and;
		move=>int(1<<1);red;
		move=>b;set;//b=(carry&b)<<1;
	};
	let loop30={//assert loop30 == ..this;
		let continue;
		let startI=int(1<<29);
		let i=int(0);
		move=>startI;get;
		move=>i;set;//i=1<<29; repeats 30 times
		virtual:{
			def halfAdder;
			def let nextI={

			};delete nextI;
		};
	};
};
//debugger a()"label.code[0]";
//{}(){}{}{}(){}(){}{}{}()()();
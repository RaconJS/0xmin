#"tptasm";
#"table";


let a{let b{let c}};
let =(a.b.c);//same as `let c = a.b.c`
debugger c;


let print(string,reg,isValid)={
	repeat !reg #reg = 1;
	repeat !isValid {
		let temp_static;
		defer return: def temp_static;
		st %reg temp_static;
		defer return: ld %reg temp_static;
		exh %reg 0x2002;
	};
	let i = -1;
	repeat string..length st string.(i+=1) r1;
	jump->return..return;
}::{
	def let temp_static{0};//:[]static
};
defer: def print;
print("Hello, world!");


let Var()={
}::{//static memory management
	let ..prototype{
		let alloc(object){

		};
		let free(object){

		};
		let ..prototype(){
			;
		};
	};
	let newTemplate(object){
		object;
	};
	let call(from,to){//:#(Var,Var)->#?
		let =to.using;
	};
};
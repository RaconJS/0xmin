#"len";#"code";
let int=#(value)={
	#constructor{
		this;
	};
	repeat !!value: value;
	repeat !value: null;
};
let MemoryCell()={//class
	def let value{1};//:{tag=1;isLower:bool;bit[20]} actual data
}{
	let prototype=..this()#{
		let data=int(1<<2);
		let isCurrentCell=int(1<<1);//1 if the current cell is ahead of this one
	};
	let set ..prototype{
		...labelsof prototype;
	};
	...labelsof prototype;
	#set ..this()={
		#set array{
			this;
		};
	};
	0x3fffffff;//#def let startValue;
	def let array{};
};
let checkBit{
	move=>MemoryCell.prototype.isCurrentCell;get;if;
	move=>MemoryCell.array;
	//while (MemoryCell.array[i].isCurrentCell == 0 ) i++;
	def:{:whileLoop;
		//assert: if=true
		and;if;{//if move == 1
			jump->whileLoop..return;
		};
		move MemoryCell.prototype..length;
		jump->whileLoop;
		//$move=>;
	};
	//assert move=>?
	{
		get;
		set_jump;//set jump +3
	};
};
let main{
	checkBit;
};
$def set main;
int;//same as `#def: int;` or `$def set: int;`
MemoryCell;
get jump -1;
or input;
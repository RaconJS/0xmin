#"log.code";
#"log.table";
#"make file";
#import lib "io.0xmin";
let int(number)={
	#let self=this;
	#set constructor.vars{
		#def self;
		def number;
	}
}::{
	def let vars{}
}
let showInt(){move->io.output1;set;}
let printNumber(number)={
	static let block,block.start;
	if(number&&(number!=alu)){
		move->number;get;
	}
	move->constructor.block.input;set;
	#let returner{jump constructor.block.return->1};
	move->returner;get;
	move->constructor.block.return;set;
	jump->constructor.block.start;
	def returner;
	//runs foo;
	$move->constructor.block.return;
	//$assert alu&constructor.block.char0=constructor.block.char00;
}::{
	def set block{
		#var set start;
		let int(number)={
			#let self=this;
			#set constructor.vars{
				#def self;
				def number;
			}
		}::{
			let vars{}
		}
		#{
			let chars=int=("0123456789ABCDEF");
			let input=int=(0);
			let const_2=int=(2);
			let temp;
		}
		$move->return;
		#def set start;
		move->input;get;
		switch:{
			#let break.move;
			#let const_relativeAddress{0 1;int=(this);}// = 0x10
			//assert 0 1; == move 1;
			move->const_relativeAddress;if;null;red;
			#delete const_relativeAddress;
			if:{ 
				move->break.switch.break.move;
				if;
				#def let then;
					jump->break;
				#def let else;
					move->chars 0;get;
					move->break.switch.break.move;
					jump->break.switch;
			}
			move->temp;set;
			#let temp1;
			#let const_negativeAddress{0 -0;int=(this);}
			move->const_negativeAddress;
			#delete const_negativeAddress;
			nor;move->temp1;set;nor;set;
			move->chars;
			null def temp;
			get;
			null def temp1;
			#set break.move->chars;
		}

		move->terminal.output;set;
		move->io.output1;set;
		move->return;
		null def return;
		def int.vars;
	}
}
let setInt(a,b){
	if(a&&(a!=alu)){move->a;get;}
	if(b&&(b!=alu)){move->b;set;}
}
def main;
setInt(int=(String("E")),terminal.output);
def printNumber(int(2));
#void(){{

	${
		get jump +1;
		set jump +2;
	}
	def let int(number)={
		def number;
		#let self=this;
		#set constructor.vals{def self;};
	}::{def let vals{};} 
	def main;
	#let in{5;6}::{#int(this)};
	#let h{let{};let{}}
	#let moveVal(a,b){
		if(a!=move){move->a;get;}
		if(b!=move){move->b;set;}
	}
	#let a,b=a+1;
	moveVal(in[0],h[0]);
	moveVal(in[1],h[1]);
	#set h[0] -> int(0);
	#set h[1] -> int(0);

	#def let loop,loop.move;
	$loop.move->move;loop:{
		#let red=int(0x20000000);
		#let andPart, xorPart;
		def xorPart:{
			#delete xorPart;
			move->h[0];get;
			move->h[1];if;null;xor;
			move->red;
			if;
				jump->then;
				get;
				#def then;
			#delete then;
			move->h[0];set;
		}def andPart:{
			#delete andPart;
			move->h[1];get;if;null;
			move->red;xor;
			if;//if a != red
				jump+2;
				jump->break.loop;//else skip xor bit
			move->h[1];if;null;and;
			move->red;
			if;
				jump->then;
				get;
				#def then;
			#delete then;
			#let const_2=int(2);
			move->const_2;red;
			#delete const_2;
			move->h[1];set;
		}
		#delete red;
	}
	move->loop.move;
	jump->loop;
}}
//def printNumber(int(7));
//let string=int=(".con\n.con the company you can trust.");
//setInt(string,terminal.output);
move->0xmin 1;//jump 0;
/*
((a~b)~(a&b));

a~b!=1;

(a~b)~(a&b)!=1;

(a&b)!=1;

(a&~b)|(~a&b);;
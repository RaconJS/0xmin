#"make file";
#"!log.table";
#"!log.code";
# import lib "io.0xmin";
let get_user_input{
	#let block{};
	#let block1=block;
	#let call(shouldWait)={
		#static let this.block=block1;
		if(shouldWait === true){
			move->block.shouldWait;get;
			move->block.waitLine;set;
		}else if(shouldWait === false){
			move->block.shouldWait;get;
			move->block.waitLine;set;
		}
		#let ret;
		move->ret;
		get;
		move->constructor.block.return;
		set;
		jump->constructor.block;
		jump constructor.block.return->1 def ret;
		$move->constructor.block.return;
	};
	delete block1;
	#set block{
		@{
			#let main;
			$move->return;
			jump->main;
			0x20010000 def let confirm;
			0x20000000 def let red;
			#let ret=return;
			#let return.move;
			#let waitLine;
			jump waitLine->return def let isWait;
			jump waitLine->main def let isNotWait;
		}
		def main;
		confirmInput:{
			move->confirm;
			get;
			move->terminal.input;
			if;null;
			xor;
			move->return.move;
			if;{//if terminal.input != String.confirm()
				#def waitLine;
				jump->return;
			}
			move->terminal.output;
			set;//confirm input
		}
		recieveInput:{
			$assert move->terminal.output;
			//assert alu = confirm;
			move->terminal.input;
			repeat 8 or;
		}
		cleanInput:{
			move->confirm;
			xor;
			move->red;
			jump+2;
			"\x00"def let char;
			move->char;
			delete char;
			or;
		}
		#set return.move->return;
		move->return.move;
		null def return;
	}
}::{def block;}
#let int(val)={
	def val;let self=this;#set int.block{def self;}
}::{def let block}
#def main;
move->int(String.pos(0,0));get;
move->terminal.output;set;
def get_user_input.call();
if;:{
	#let then,mv->0xmin;
	$mv->move;
	jump->then;
	#def let else;
		move->int("O");get;move->terminal.output;
	jump -> break;
	$move->mv;
	#def then;
		move->int("\x00");or;move->terminal.output;
}
set;

move->0xmin;
jump->main;
def String.pos(5,6);
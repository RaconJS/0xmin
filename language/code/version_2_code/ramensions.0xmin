#"!log.table";
import lib "std.0xmin";
...import.switch_function;
...import.increment_function;
let for(init,condition,increment,block){
	def init;
	loop:{
		#let continue.state->0xmin;
		#let break.state->0xmin;
		$continue.state->move;
		def condition;
		$break.state->move;
		if;
		jump+2;
		jump->break;
		def block;
		def increment;
		move->continue.state;
		jump->continue;
		$move->break.state;
	}
}
let ramension()={
	#static void {
		var memoryPart(){
			null def let sum;//sum
			null def let i;//i's left
			#static void{
				#var block_p1=memoryPart();
				#var block=memoryPart();
				#var block_n1=memoryPart();
				#let{
					@void{
						def block_n1;
						def block;
						def block_p1;
					}
				}::{#int(this);}
			}
		}
		var memory{};
		var block{
			#let goto_y()={
				null;
				#let a;
			}::{}
			#let:
				i=int=(null),//int;
				b=int=(null),//int;
			let:
				a=int=(null),//int;
				x=int=(null),//int;
				y=int=(null)//int*;
			;
			let moveToY=int=(null);
			let yToMove=int=(null);
			#{
				let goto()={
					#def let a;
					#set constructor.block{
						move->a;set;
					}
				}::{let block{}}
				let gofrom()={
					#def let a;
					#set constructor.block{
						move->a;set;
					}
				}::{let block{}}
				#let setCommands{
					#let shift{
						let{0 +1;}::{(this..compile()[0]*2);}
						#int=(this);
					}
					#let negative{
						let{0 -0;}::{(this..compile()[0]);}
						#int=(this);
					}
					move->y;get;
					move->shift;red;
					move->moveToY;set;
					def goto.block;
					move->negative;or;
					move->yToMove;set;
					def gofrom.block;
				}
			}
			def setCommands;
			#let endFor;
			let{
				start:{
					move->x;get;nor;
					move->i;set;//i = ~x
				}
				condision:{
					move->i;get;//while i!=white
					if;nor;
				}
				add1:{
					move->i;get;
					def increment();
					move->i;set;
				}
				block:{
					
				}
			}::{
				def for(this[0],this[1],this[2],this[3]);
			}
			def memory;
			repeat 10 int();
		}
	}
}
//def ramension.block;

# "make file";
# "!log.table";
# "log.code";
//simple, strict, 0xmin macro assembly
@ import lib "io.0xmin";
# let : string;
# let : endString;
# let : i;
# let : len;
# let : zero;
# def : i;
@ null;
# def : zero;
@ 0x20000000;
# def : string;
@ "H";
@ "e";
@ "l";
@ "l";
@ "o";
@ " ";
@ "W";
@ "o";
@ "r";
@ "l";
@ "d";
@ "!";
# def : endString;
# def : len;
# move string -> endString;
$ move endString -> string;
# def : main;
@ move -> zero;
@ get;
@ move -> i;
@ set;
# let : forLoop;
# let : forLoopState;
# set : forLoopState -> 0xmin;
# let : endForLoop;
# let : endForLoopState;
# def : endForLoopState -> 0xmin;
$ forLoopState -> move;
# def : forLoop;
@ move -> i;
@ get;
@ move -> zero;
@ move -> len;
@ xor;
@ if;
@ null;
@ move -> zero;
@ xor;
@ if;
@ jump +2;
@ jump -> endForLoop;
$ endForLoopState -> move;
# delete len;
# delete zero;
@ move -> i;
@ get;
@ jump +2;
# let : moveTo;
# let : moveBack;
# let : shift;
# def : shift;
@ 0 +1;
@ move -> shift;
# delete shift;
@ red;
@ move -> moveTo;
@ set;
# let : negative;
@ jump +2;
# def : negative;
@ 0 -0;
@ move -> negative;
# delete negative;
@ or;
@ move -> moveBack;
@ set;
@ move -> string;
# delete string;
# def : moveTo;
@ null;
@ get;
# def : moveBack;
@ null;
# delete moveTo;
# delete moveBack;
@ move -> terminal.output;
@ set;
@ move -> i;
@ get;
# let : increment_end;
# let : const_not1;
# let : notX;
@ move -> notX;
@ set;
@ nor;
@ set;
@ blue;
@ move -> const_not1;
@ xor;
@ move -> notX;
@ red;
@ jump -> increment_end;
# def : notX;
@ null;
# def : const_not1;
@ 0x3ffffffe;
# def : increment_end;
# delete notX;
# delete const_not1;
# delete increment_end;
@ move -> i;
@ set;
@ move -> forLoopState;
# delete forLoopState;
@ jump -> forLoop;
# def : endForLoop;
$ move -> endForLoopState;
# delete endForLoopState;
# delete forLoop;
# delete endForLoop;
# delete i;
@ move -> 0xmin 1;
@ jump 0;
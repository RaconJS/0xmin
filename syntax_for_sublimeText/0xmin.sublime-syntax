%YAML 1.2
---
#useful: https://www.sublimetext.com/docs/scope_naming.html
# See http://www.sublimetext.com/docs/syntax.html
name:
  0xmin
file_extensions:
  - 0xmin #ec
  - zasm
scope: source.0xmin
# const wordsRegex=/
# [#${}()]
# |::?
# |\.+
# |([_\w]+\s*\.\s*)*[_\w]+
# |,
# |[\[\]]
# |(<[-=]>|-?->|<--?|<==?|=?=>|=?=?=)
# |[><\!]=?
# |[+-]?(0b[0-1]+|0x[0-9a-fA-F]+|[0-9]+)
# |(\+\+?(?![0-9])|--?|\*\*?|\/)
# |(&&?|\|\|?|!|\^\^?|~|[£%@?¬])
# |[^\s]
# /g;
#
#
variables:
  baseNumber: '\b0x(?:[0-9]|[a-f]|[A-F])+(?:\.(?:[0-9]|[a-f]|[A-F])+)?\b|\b0b[01]+(?:\.[01]+)?\b|\b(?:0|[1-9])[0-9]*(?:\.[0-9]+)?\b'
  number: '\b(?:undefined|null)\b|{{baseNumber}}' #\b(?:0b[0-1]+|0x[0-9a-fA-F]+|[0-9]+)\b'
  signedNumber: '(?:\b|[+\-*/]\s*){{baseNumber}}' #(?:0b[0-1]+|0x[0-9a-fA-F]+|[0-9]+)\b'
  labelName: '\b\w+\b'
  #buildSettingWords: '\!?(make file|log.table|log.code)'
  equalSigns: '<=>|<=|=>|=|==|<->|<-|->'
  assembly_operators: '<->|<-|->'
  operators: '[&|^]{1,2}|>{1,3}|<{1,2}|\.\.\.|[!%*\-+=@#~|<>/?¬]'
  operators_functionCallArgs: '::|:>|<:'
  assembly_commands_special: '\b(?:get\s+jump\s+\-1|set\s+jump\s+\+3|or\s+input)\b'
  assembly_commands: '\b(?:nor|red|blue|or|and|xor|get|set|if|move|jump|or_input|get_jump|set_jump)\b'
  assembly_registers: '\b(?:jump|move|alu|ram|new|del)\b' #new and del are for heap memories. e.g: multi registor cpu's
  startFile: '!?(make file|code|table|0xmin|tptasm|asm|int|len)' #'!?(make file|log.code|log.table)'
  functionCallSymbols: '(?<!<)(?:=>|->|<-|=)'
  inbuiltProperties: '\b(?:length|code|splice|array|labels|compile|seal|freeze|this|return|proto|super|constructor|prototype|supertype|defs|indexOf|asNumber)\b'

  line_start_endLinePart: ':|(?=\S)'
contexts:
  main:
    - match: '^'
      push: startFile
  startFile:
    - match: \s*(#)(?:\s*(["'`])\s*({{startFile}})\s*(\2)\s*); #^\s*#?(\s*(["'`])\s*{{startFile}}\s*\2\s*|\/\/\s*{{startFile}}\b|\/\*{{startFile}};?\*\/)\s*
      scope: keyword.declaration.fileSetting.0xmin
      #captures:
      #  1: keyword.declaration.fileSetting.0xmin  # meta symbol '#'
      #  2: string # first '"'
      #  3: keyword.declaration.fileSetting.0xmin # 'setting'
      #  5: string # second '"'
    - include: comments
    - match: '(?=\S)' #(?!^\s*#?(\s*(["'`])\s*{{startFile}}\s*\2\s*|\/\/\s*{{startFile}}\b|\/\*{{startFile}};?\*\/))
      set: mainScope #global #
    #- include: baseMain
  global:
    - match: '}|\]|\)'
      scope: invalid.illegal
    - match: ''
      push: line_start
  line_start: #new parser
    - include: baseMain
    - match: '\}'
      #pop: true
    - match: '\)|\]'
      scope: invalid.illegal
    - match: '\s*'
      set: line_start_1_default
  line_start_1_main:
    - match: '\b(?:void|static|virtual)\b'
      scope: keyword.statementType.0xmin
  line_start_2_main:
    - match: '\b(?:recur|repeat)\b'
      scope: keyword.statementType.0xmin
      pop: true
      push: [keyword_1arg_2,keyword_1arg_1]
  keyword_1arg_1:
    - match: ''
      pop: true
      push: expression_short
  keyword_1arg_2:
    - include: baseMain
    - match: '{{line_start_endLinePart}}'
      set: line_start
  line_start_3_main:
    - match: '\b(?:recur|repeat)\b'
      scope: keyword.controll.0xmin
  line_start_3_getDefaultPhase:
    - match: '(?=\b(let|def)\b)'
      set: meta_macro
    - match: '(?=\b(undef|ram)\b)'
      set: meta_hidden
    - match: ''
      set: meta_assembly
  function:
    - include: baseMain
    - match: '\('
      set: #parameters
        - include: baseMain
        - match: '\)'
          set: 
            - match: '{{functionCallSymbols}}?'
              scope: support.constant.functionType.0xmin
              set:
                - match: '\{'
                  set: line_start
                - match: '(?=\S)'
                  fail: bracket
        - match: '(?=\S)'
          push: expression_short
  expression_short_bracket:
    - match: '\('
      push: expression_normal
      set: expression_extends
  expression_end:
    - match: '(?=\;|\})'
      pop: true
  expression_short:
    - meta_scope: short.TEST
    - include: baseMain
    - include: expression_end
    - match: '{{signedNumber}}'
      scope: constant.numeric
      set: expression_extends
    - match: '(?=\()'
      #push: expression_normal
      #set: expression_extends
      branch_point: bracket
      branch:
        - function
        - expression_short_bracket
    - match: '\['
      push: expression_square
      set: expression_extends
    - match: '\{'
      push: line_start
      set: expression_extends
    - match: '\b\w+\b'
      set: expression_extends
    - match: '(?=\S)'
      set: expression_extends
  expression_extends:
    - meta_scope: extend.TEST
    - include: baseMain
    - include: expression_end
    - match: '\.\.'
      push:
      - include: baseMain
      - match: '{{inbuiltProperties}}'
        scope: support.function.internalScope.0xmin
        pop: true
      - match: '(?=\S)'
        pop: true
    - match: '\.'
      push:
      - match: '\b\w+\b'
        pop: true
      - match: '(?=\()'
        push: expression
      - match: ''
        pop: true
    - match: '{{signedNumber}}'
      scope: constant.numeric.0xmin
      pop: true
    - match: '\('
      set: expression_normal
    - match: '\['
      set: expression_square
    - match: '\{'
      set: line_start
    - match: '\b\w+\b'
    - match: '(?=\S)'
      pop: true
  expression:
    - include: baseMain
    - include: expression_end
    - match: '(?:[+\-*/%]|\*\*)|(?:^^|&&|\|\|)|(?:)'
      scope: keyword.operator.0xmin
      #push: expression_short
    - match: '=|=>'
      scope: keyword.assignment.0xmin
    - match: '=|=>'
      scope: keyword.assignment.0xmin
    - match: '(?=[{\(\w\.])'
      push: expression_short
    - match: '(?=\S)'
      pop: true
  expression_normal:
    - meta_scope: normal.TEST
    - include: baseMain
    - match: '\)'
      pop: true
    - include: expression
    - match: '\]|\}'
      scope: invalid.illegal
  expression_square:
    - include: baseMain
    - match: '\]'
      pop: true
    - match: '\)'
      scope: error
      pop: true
    - include: expression
    - match: '\)|\}'
      scope: invalid.illegal
  endLine:
    - match: ';|(?=}|$)'
      pop: true
  meta_assembly:
    - meta_scope: '@'
    - include: baseMain
    - include: endLine
    - match: '{{assembly_registers}}'
      scope: keyword.register.0xmin
      push: meta_assembly_args
    - match: '{{assembly_commands}}'
      scope: keyword.assembly.0xmin #support.constant
      push: meta_assembly_args
    - match: ','
    - match: ''
      pop: true
  meta_assembly_args:
    - include: baseMain
    - include: endLine
    - match: '{{assembly_registers}}'
      scope: keyword.register.0xmin
    - match: '{{assembly_operators}}'
      scope: support.constant.operator.0xmin
    - match: ''
      push: expression_short
  meta_hidden:
    - meta_scope: '$'
    - include: baseMain
    - include: endLine
    - match: '((?:\b(?:let|set|def)\b\s*)*):?'
      captures:
        1: entity.name.hidden.0xmin
      push: expression
    - match: ','
    - match: ''
      pop: true
  meta_macro:
    - meta_scope: '#'
    - include: baseMain
    - include: endLine
    - match: '((?:\b(?:let|set|def)\b\s*)*):?'
      captures:
        1: keyword.declaration
      push: expression
    - match: ','
    - match: ''
      pop: true
  line_start_1: #new parser
    - include: baseMain
    - include: line_start_1_main
    - match: '#'
      scope: support.constant.meta.0xmin
      set: line_start_1_meta
    - match: '\$' #(?:\s*\b(?:set|def)\b)*'
      scope: entity.name.hidden.0xmin
      set: line_start_1_hidden
    - match: '@'
      scope: keyword.assembly.0xmin
      set: line_start_1_assembly
  line_start_1_default:
    - include: line_start_1
    - match: '{{line_start_endLinePart}}'
      set: line_start_2_default
  line_start_1_meta:
    - include: line_start_1
    - match: '{{line_start_endLinePart}}'
      set: line_start_2_meta
  line_start_1_hidden:
    - include: line_start_1
    - match: '{{line_start_endLinePart}}'
      set: line_start_2_hidden
    - include: line_start_endLinePart
  line_start_1_assembly:
    - include: line_start_1
    - match: '{{line_start_endLinePart}}'
      set: line_start_2_assembly
    - include: line_start_endLinePart

  line_start_2: #new parser
    - include: baseMain
    - include: line_start_2_main
    - match: '#'
      scope: support.constant.meta.0xmin
      set: line_start_2_meta
    - match: '\$' #(?:\s*\b(?:set|def)\b)*'
      scope: entity.name.hidden.0xmin
      set: line_start_2_hidden
    - match: '@'
      scope: keyword.assembly.0xmin
      set: line_start_2_assembly
  line_start_2_default:
    - include: line_start_2
    - match: '{{line_start_endLinePart}}'
      set: line_start_3_default
  line_start_2_meta:
    - include: line_start_2
    - match: '{{line_start_endLinePart}}'
      set: line_start_3_meta
  line_start_2_hidden:
    - include: line_start_2
    - match: '{{line_start_endLinePart}}'
      set: line_start_3_hidden
    - include: line_start_endLinePart
  line_start_2_assembly:
    - include: line_start_2
    - match: '{{line_start_endLinePart}}'
      set: line_start_3_assembly
    - include: line_start_endLinePart

  line_start_3: #new parser
    - include: baseMain
    - include: line_start_3_main
    - match: '#'
      scope: support.constant.meta.0xmin
      set: line_start_3_meta
    - match: '\$' #(?:\s*\b(?:set|def)\b)*'
      scope: entity.name.hidden.0xmin
      set: line_start_3_hidden
    - match: '@'
      scope: keyword.assembly.0xmin
      set: line_start_3_assembly
  line_start_3_default:
    - include: line_start_3
    - match: '{{line_start_endLinePart}}'
      set: line_start_3_getDefaultPhase
  line_start_3_meta:
    - include: line_start_2
    - match: '{{line_start_endLinePart}}'
      set: meta_macro
  line_start_3_hidden:
    - include: line_start_2
    - match: '{{line_start_endLinePart}}'
      set: meta_hidden
    - include: line_start_endLinePart
  line_start_3_assembly:
    - include: line_start_2
    - match: '{{line_start_endLinePart}}'
      set: meta_assembly
    - include: line_start_endLinePart












#old simple parser
  mainScope:
    - include: baseMain
    - match: \b(0xmin|0bmin)\b
      scope: variable.language.0xminObject.0xmin
    - match: '(\.\.\.)((?:\s*\b(?:let|set|def|codeof|labelsof|run)\b)*)'
      captures:
        1: keyword.inject.0xmin
        2: keyword.declaration.inject.0xmin
    - match: '\.\.'
      push: internalScope
    - match: \.
      scope: dotOperator.0xmin
    - match: '\b(?:static|void)\b' #1st part of line along with '@$#'
      scope: keyword.control
    - match: '(?:\b(?:recur|repeat)\b\s*)+' #2nd part of line
      scope: keyword.control
    - match: '{{labelName}}\s*(?=(?:\([^()]*?\)\s*(?:{{functionCallSymbols}})?\s*){)' #'foo(){}'
      scope: entity.name.function
    - match: '{{labelName}}\s*(?={)' #'foo(){}'
      scope: entity.name.namespace
    - match: '\)' #'foo = ()=>{}' function declaration
      push: potentialFunctionDeclaration
    - match: '{{labelName}}\s*(?=(?:{{functionCallSymbols}})?\s*\()'
      scope: variable.function.0xmin
      push: functionCall_1
    - match: '(?<=\))\s*(?=(?:{{functionCallSymbols}})?\s*\()'
      push: functionCall_1
    - match: '(?:{{functionCallSymbols}})\s*(?=\()' #'foo=>();' function call
      scope: 'keyword.declaration.functionCall.0xmin'

      #push:
      #  - include: brackets_expression
    - match: '(?:\b(?:virtual)\b\s*)+' #2nd part of line
      scope: keyword.control
    - match: '\b(?:import|debugger|delete)\b' #3rd part of line along with
      scope: keyword.control
    - match: '(?<=\bimport)\s+(?:lib|this|main)\b'
      scope: support.constant.import.0xmin
    #- match: '(?=\b(?:let|def)\b)'
    #  push: main_meta
    #- match: '{{assembly_commands_special}}'
    #  scope: keyword.command
    - match: '\b(?:var|const|let|def|set|undef)\b'
      scope: keyword.declaration.meta.0xmin
    - match: '\b(?:this|constructor|return|arguments|caller|continue|break)\b'
      scope: variable.parameter
    - match: '{{assembly_registers}}'
      scope: keyword.control.register.0xmin
    - match: '{{assembly_commands}}'
      scope: support.constant
    - match: '\#;|#'
    #  push: main_meta
      scope: support.constant.meta.0xmin
    - match: '\$;|\$' #(?:\s*\b(?:set|def)\b)*'
      scope: entity.name.hidden.0xmin
    #  push: main_hidden
    - match: '\@;|@'
      scope: keyword.assembly.0xmin
    - match: '{{assembly_operators}}'
      scope: support.constant.operator.0xmin
    - match: '{{operators_functionCallArgs}}'
      scope: keyword.argumentJoiner.0xmin
    - match: '{{operators}}'
      scope: keyword.operator
    - match: '\((?=(?:[^\(]|\([^\(]*\))*\)\s*(?:{{functionCallSymbols}}\s*)?{)' # foo(param1,param2){}
      push: parameters
  brackets_expression:
    - include: baseMain
    - match: '\('
      push: brackets_expression
    - match: '\)'
      pop: true
    - include: mainScope
  parameters:
    - match: '{{labelName}}'
      scope: variable.parameter
    - match: '\)'
      pop: true
      push: functionType
    - include: brackets_expression
    - include: mainScope
  functionType:
    - match: '{{functionCallSymbols}}|'
      scope: 'keyword.declaration.functionCall.0xmin'
      pop: true
  internalScope:
    - match: '{{inbuiltProperties}}'
      scope: 'support.function'
    - match: '(?=\S)'
      pop: true
  main_lineType:
    - match: ':'
      push: main_body
    - match: '(?=\S|$)'
      push: main_body
  main_hidden:
    - match: '\b(?:def|set|undef)\b'
      scope: keyword.declaration.hidden.0xmin
    - include: main_lineType
    - include: mainScope
  main_meta:
    - match: '\b(?:let|set|def)\b'
      scope: keyword.declaration.meta.0xmin
    - include: main_lineType
    - include: mainScope
  main_body:
    - match: ';'
      pop: 2
    - include: mainScope
  potentialFunctionDeclaration: #'foo = ()=>{}' function declaration
    - match: '\s*(?:{{functionCallSymbols}})\s*(?={)'
      scope: 'keyword.declaration.functionSymbol.0xmin'
      pop: true
    - match: '(?=[\S])'
      pop: true
    #- include: mainScope
  functionCall_1:
    - match: '\('
      push: functionCall_2
    - include: mainScope
  functionCall_2:
    - match: '\('
      push: functionCall_normalBrackets
    - match: '\)'
      pop: 2
    - include: mainScope
  functionCall_normalBrackets:
    - match: '\)'
      pop: true
    - include: mainScope
  baseMain:
    - meta_scope: source.0xmin
    - match: \b(Z)(A)(S)(M)\b
      captures:
        1: constant.numeric.ZASM_Z.0xmin
        2: keyword.ZASM_A.0xmin
        3: entity.name.hidden.ZASM_S.0xmin
        4: support.constant.ZASM_M.0xmin
    - match: \b(0xmin|0bmin)\b
      scope: variable.language.0xminObject.0xmin
    #- match: ()["'`]
    #  scope: punctuation.definition.string.begin.0xmin
    - match: \"
      push: double_quoted_"
    - match: \'
      push: double_quoted_'
    - match: \`
      push: double_quoted_`
    - include: comments
    # Comments begin with a '//' and finish at the end of the line
  comments:
    - match:  '//'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    - match:  '/\*'
      scope: punctuation.definition.comment.example-c
      push: multiple_lines_comment
    - match: '{{number}}'
      scope: constant.numeric
  double_quoted_string:
    - match: \\(?:[xcp](?:[0-9]|[a-f]|[A-F]){2}|u[0-9]{4}|[\s\S])?
      scope: constant.character.escape.example-c
  double_quoted_":
    - meta_scope: string
    - include: double_quoted_string
    - match: \"
      pop: true
  double_quoted_':
    - meta_scope: string
    - include: double_quoted_string
    - match: \'
      pop: true
  double_quoted_`:
    - meta_scope: string
    - include: double_quoted_string
    - match: \`
      pop: true
  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
  multiple_lines_comment:
    - meta_scope: comment.line.example-c
    - match: '\*\/'
      pop: true
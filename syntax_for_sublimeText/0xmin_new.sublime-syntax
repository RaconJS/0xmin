%YAML 1.2
---
#useful: https://www.sublimetext.com/docs/scope_naming.html
# See http://www.sublimetext.com/docs/syntax.html
name:
  0xmin_2
file_extensions:
  - 0xmin #ec
scope: source.0xmin
# const wordsRegex=/
# [#${}()]
# |::?
# |\.+
# |([_\w]+\s*\.\s*)*[_\w]+
# |,
# |[\[\]]
# |(<[-=]>|-?->|<--?|<==?|=?=>|=?=?=)
# |[><\!]=?
# |[+-]?(0b[0-1]+|0x[0-9a-fA-F]+|[0-9]+)
# |(\+\+?(?![0-9])|--?|\*\*?|\/)
# |(&&?|\|\|?|!|\^\^?|~|[£%@?¬])
# |[^\s]
# /g;
#
#
variables:
  number: '\b(?:undefined|null)\b|\b[+-]?(0b[0-1]+|0x[0-9a-fA-F]+|[0-9]+)\b'
  labelName: '\b\w+\b'
  buildSettingWords: '\!?(make file|log.table|log.code)'
  equalSigns: '<=>|<=|=>|=|<->|<-|->'
  assembly_operators: '<->|<-|->'
  operators: '[&|^]{1,2}|>{1,3}|<{1,2}|\.\.\.|[!%*\-+=@#~|<>/?]'
  assembly_commands: '\b(?:nor|red|blue|get|set|if)\b'
  assembly_registers: '\b(?:jump|move|alu|ram)\b'
  startFile: '!?(make file|log.code|log.table)'
  functionCallSymbols: '=>|->|<-|='
contexts:
  main:
    - match: '^'
      push: startFile
  startFile:
    - match: ^\s*#?(\s*(["'`])\s*{{startFile}}\s*\2\s*|\/\/\s*{{startFile}}\b|\/\*{{startFile}};?\*\/)\s*
      scope: keyword.declaration.fileSetting.0xmin
    - match: '(?=^)' #(?!^\s*#?(\s*(["'`])\s*{{startFile}}\s*\2\s*|\/\/\s*{{startFile}}\b|\/\*{{startFile}};?\*\/))
      pop: true
      push: mainScope
    #- include: baseMain
  mainScope:
    - include: baseMain
    - include: line_start_1
  line_start_1_base:
    - include: baseMain
    - match: \b(0xmin|0bmin)\b

      scope: variable.language.0xminObject.0xmin
    - match: '{{labelName}}\s*(?=(?:(?:{{functionCallSymbols}})?\s*\([\s\S]*?\)\s*){)' #'foo(){}'
      scope: entity.name.function
    - match: '{{labelName}}\s*(?={)' #'foo(){}'
      scope: entity.name.namespace
    - match: '{{labelName}}\s*(?=(?:{{functionCallSymbols}})?\s*\()'
      scope: variable.function.0xmin
      push: functionCall_1
    - match: '(?<=\))\s*(?=(?:{{functionCallSymbols}})?\s*\()'
      push: functionCall_1
    - match: '(?:{{functionCallSymbols}})\s*(?=\()' #'foo=>();' function call
      scope: 'keyword.declaration.functionCall.0xmin'
    - match: '\)' #'foo = ()=>{}' function declaration
      push: potentialFunctionDeclaration

    - match: '\b(?:static|void)\b'
      scope: keyword.control
    - match: '\b(?:recur|repeat|virtual)\b'
      scope: keyword.control
    - match: '\b(?:import|debugger|delete)\b'
      scope: keyword.control
    - match: '\b(?:var|let|def|set)\b'
      scope: keyword.declaration.meta.0xmin
    - match: '\.\.'
      push: internalScope
    - match: '{{assembly_commands}}'
      scope: support.constant
    - match: '{{assembly_registers}}'
      scope: keyword.control.register.0xmin
    - match: '#'
      scope: support.constant.meta.0xmin
    - match: '\$' #(?:\s*\b(?:set|def)\b)*'
      scope: entity.name.hidden.0xmin
    - match: '@'
      scope: keyword.assembly.0xmin
    - match: '{{assembly_operators}}'
      scope: support.constant.operator.0xmin
    - match: '{{operators}}'
      scope: keyword.operator
  line_start_1:
    - include: line_start_1_base
  internalScope:
    - match: '\b(?:length|compile|array|code|labels)\b'
      scope: 'support.function'
    - match: '(?=\S)'
      pop: true
  potentialFunctionDeclaration: #'foo = ()=>{}' function declaration
    - match: '\s*(?:{{functionCallSymbols}})\s*(?={)'
      scope: 'keyword.declaration.functionSymbol.0xmin'
      pop: true
    - match: '(?=[\S])'
      pop: true
    #- include: mainScope
  functionCall_1:
    - match: '\('
      push: functionCall_2
    - include: mainScope
  functionCall_2:
    - match: '\('
      push: functionCall_normalBrackets
    - match: '\)'
      pop: 2
    - include: mainScope
  functionCall_normalBrackets:
    - match: '\)'
      pop: true
    - include: mainScope
  baseMain:
    - meta_scope: source.0xmin
    #- match: ()["'`]
    #  scope: punctuation.definition.string.begin.0xmin
    - match: \"
      push: double_quoted_"
    - match: \'
      push: double_quoted_'
    - match: \`
      push: double_quoted_`

    # Comments begin with a '//' and finish at the end of the line
    - match:  '//'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    - match:  '/\*'
      scope: punctuation.definition.comment.example-c
      push: multiple_lines_comment
    - match: '{{number}}'
      scope: constant.numeric
  double_quoted_string:
    - match: \\(x([0-9]|[a-f]|[A-F]){2}|[\s\S])?
      scope: constant.character.escape.example-c
  double_quoted_":
    - meta_scope: string
    - include: double_quoted_string
    - match: \"
      pop: true
  double_quoted_':
    - meta_scope: string
    - include: double_quoted_string
    - match: \'
      pop: true
  double_quoted_`:
    - meta_scope: string
    - include: double_quoted_string
    - match: \`
      pop: true
  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true
  multiple_lines_comment:
    - meta_scope: comment.line.example-c
    - match: '\*\/'
      pop: true